
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/script/board/chess/blackchess/knightblack.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'faf2fbxdgBPtYXqlCw9CqTs', 'knightblack');
// script/board/chess/blackchess/knightblack.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    place: {
      "default": null,
      type: cc.Node
    },
    redchess: {
      "default": null,
      type: cc.Node
    },
    blackchess: {
      "default": null,
      type: cc.Node
    },
    map: {
      "default": null,
      type: cc.Node
    }
  },
  showpossiblemove: function showpossiblemove() {
    var map = this.map.getComponent('boardinfo');
    var touchmove = this.map.getComponent('touchmove');
    var place = this.place;
    var posmove = place.getChildren();
    var redchess = this.redchess;
    var redc = redchess.getChildren();
    var blackchess = this.blackchess;
    var blackc = blackchess.getChildren();
    redc.parent = place;
    blackc.parent = place;
    self = this; //deactive before another click

    for (var i = 0; i < posmove.length; i++) {
      if (posmove[i].active == true) {
        posmove[i].active = false;
      }
    } //blackturn


    redchess.pauseSystemEvents(true); //logic moving

    for (var i = 0; i < posmove.length; i++) {
      //move1
      if (posmove[i].x == self.node.x + map.s && posmove[i].y == self.node.y + map.s * 2) {
        posmove[i].active = true;

        for (var j = 0; j < redc.length; j++) {
          if (redc[j].x == self.node.x && redc[j].y == self.node.y + map.s) {
            posmove[i].active = false;
          }
        }

        for (var k = 0; k < blackc.length; k++) {
          if (blackc[k].x == self.node.x && blackc[k].y == self.node.y + map.s) {
            posmove[i].active = false;
          }
        }
      } //move2


      if (posmove[i].x == self.node.x + map.s * 2 && posmove[i].y == self.node.y + map.s) {
        posmove[i].active = true;

        for (var j = 0; j < redc.length; j++) {
          if (redc[j].x == self.node.x + map.s && redc[j].y == self.node.y) {
            posmove[i].active = false;
          }
        }

        for (var k = 0; k < blackc.length; k++) {
          if (blackc[k].x == self.node.x + map.s && blackc[k].y == self.node.y) {
            posmove[i].active = false;
          }
        }
      } //move3


      if (posmove[i].x == self.node.x + map.s * 2 && posmove[i].y == self.node.y - map.s) {
        posmove[i].active = true;

        for (var j = 0; j < redc.length; j++) {
          if (redc[j].x == self.node.x + map.s && redc[j].y == self.node.y) {
            posmove[i].active = false;
          }
        }

        for (var k = 0; k < blackc.length; k++) {
          if (blackc[k].x == self.node.x + map.s && blackc[k].y == self.node.y) {
            posmove[i].active = false;
          }
        }
      } //move4


      if (posmove[i].x == self.node.x + map.s && posmove[i].y == self.node.y - map.s * 2) {
        posmove[i].active = true;

        for (var j = 0; j < redc.length; j++) {
          if (redc[j].x == self.node.x && redc[j].y == self.node.y - map.s) {
            posmove[i].active = false;
          }
        }

        for (var k = 0; k < blackc.length; k++) {
          if (blackc[k].x == self.node.x && blackc[k].y == self.node.y - map.s) {
            posmove[i].active = false;
          }
        }
      } //move5


      if (posmove[i].x == self.node.x - map.s && posmove[i].y == self.node.y - map.s * 2) {
        posmove[i].active = true;

        for (var j = 0; j < redc.length; j++) {
          if (redc[j].x == self.node.x && redc[j].y == self.node.y - map.s) {
            posmove[i].active = false;
          }
        }

        for (var k = 0; k < blackc.length; k++) {
          if (blackc[k].x == self.node.x && blackc[k].y == self.node.y - map.s) {
            posmove[i].active = false;
          }
        }
      } //move6


      if (posmove[i].x == self.node.x - map.s * 2 && posmove[i].y == self.node.y - map.s) {
        posmove[i].active = true;

        for (var j = 0; j < redc.length; j++) {
          if (redc[j].x == self.node.x - map.s && redc[j].y == self.node.y) {
            posmove[i].active = false;
          }
        }

        for (var k = 0; k < blackc.length; k++) {
          if (blackc[k].x == self.node.x - map.s && blackc[k].y == self.node.y) {
            posmove[i].active = false;
          }
        }
      } //move7


      if (posmove[i].x == self.node.x - map.s * 2 && posmove[i].y == self.node.y + map.s) {
        posmove[i].active = true;

        for (var j = 0; j < redc.length; j++) {
          if (redc[j].x == self.node.x - map.s && redc[j].y == self.node.y) {
            posmove[i].active = false;
          }
        }

        for (var k = 0; k < blackc.length; k++) {
          if (blackc[k].x == self.node.x - map.s && blackc[k].y == self.node.y) {
            posmove[i].active = false;
          }
        }
      } //move8


      if (posmove[i].x == self.node.x - map.s && posmove[i].y == self.node.y + map.s * 2) {
        posmove[i].active = true;

        for (var j = 0; j < redc.length; j++) {
          if (redc[j].x == self.node.x && redc[j].y == self.node.y + map.s) {
            posmove[i].active = false;
          }
        }

        for (var k = 0; k < blackc.length; k++) {
          if (blackc[k].x == self.node.x && blackc[k].y == self.node.y + map.s) {
            posmove[i].active = false;
          }
        }
      } //block other chess


      for (var k = 0; k < blackc.length; k++) {
        if (blackc[k].x == posmove[i].x && blackc[k].y == posmove[i].y) {
          posmove[i].active = false;
        }
      } //hightlight killable


      for (var j = 0; j < redc.length; j++) {
        if (redc[j].x == posmove[i].x && redc[j].y == posmove[i].y && posmove[i].active == true) {
          posmove[i].setScale(map.scale, map.scale);
        }
      }

      touchmove.blacktouchmove(i);
    }
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,