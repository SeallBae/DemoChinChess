{"version":3,"sources":["assets\\script\\board\\touchmove.js"],"names":["cc","Class","Component","properties","place","type","Node","redchess","blackchess","map","deadredchess","deadblackchess","movecodelist","updateall","redtouchmove","i","RoomInfos","director","getScene","getChildByName","getComponent","rid","posmove","getChildren","redc","blackc","parent","active","on","self","node","isChildOf","kill","k","length","x","y","name","then","data","pauseSystemEvents","setScale","off","reset","blacktouchmove","j","start","onLoad","update","dt"],"mappings":";;;;;;AAOA;;AACA;;AARA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACAA,EAAE,CAACC,KAAH,CAAS;AACP,aAASD,EAAE,CAACE,SADL;AAEPC,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAE;AACL,iBAAS,IADJ;AAELC,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFJ,KADG;AAKVC,IAAAA,QAAQ,EAAE;AACR,iBAAS,IADD;AAERF,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFD,KALA;AASVE,IAAAA,UAAU,EAAE;AACV,iBAAS,IADC;AAEVH,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFC,KATF;AAaVG,IAAAA,GAAG,EAAE;AACH,iBAAS,IADN;AAEHJ,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFN,KAbK;AAiBVI,IAAAA,YAAY,EAAE;AACZ,iBAAS,IADG;AAEZL,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFG,KAjBJ;AAqBVK,IAAAA,cAAc,EAAE;AACd,iBAAS,IADK;AAEdN,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFK,KArBN;AAyBVM,IAAAA,YAAY,EAAE;AACZ,iBAAS,IADG;AAEZP,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFG,KAzBJ;AA6BVO,IAAAA,SAAS,EAAE;AACT,iBAAS,IADA;AAETR,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFA,KA7BD,CAiCV;;AAjCU,GAFL;AAqCPQ,EAAAA,YArCO,wBAqCMC,CArCN,EAqCS;AACd,QAAIC,SAAS,GAAGhB,EAAE,CAACiB,QAAH,CACbC,QADa,GAEbC,cAFa,CAEE,WAFF,EAGbC,YAHa,CAGA,WAHA,CAAhB;AAIA,QAAIC,GAAG,GAAGL,SAAS,CAACK,GAApB;AACA,QAAIR,SAAS,GAAG,KAAKA,SAAL,CAAeO,YAAf,CAA4B,QAA5B,CAAhB;AACA,QAAIX,GAAG,GAAG,KAAKA,GAAL,CAASW,YAAT,CAAsB,WAAtB,CAAV;AACA,QAAIT,cAAc,GAAG,KAAKA,cAA1B;AACA,QAAIP,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAIkB,OAAO,GAAGlB,KAAK,CAACmB,WAAN,EAAd;AACA,QAAIhB,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIiB,IAAI,GAAGjB,QAAQ,CAACgB,WAAT,EAAX;AACA,QAAIf,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAIiB,MAAM,GAAGjB,UAAU,CAACe,WAAX,EAAb;AACAC,IAAAA,IAAI,CAACE,MAAL,GAActB,KAAd;AACAqB,IAAAA,MAAM,CAACC,MAAP,GAAgBtB,KAAhB;;AAEA,QAAIkB,OAAO,CAACP,CAAD,CAAP,CAAWY,MAAX,IAAqB,IAAzB,EAA+B;AAC7BL,MAAAA,OAAO,CAACP,CAAD,CAAP,CAAWa,EAAX,CACE,YADF,EAEE,YAAY;AACV,YAAIC,IAAI,CAACC,IAAL,CAAUC,SAAV,CAAoBxB,QAApB,CAAJ,EAAmC;AACjC,cAAIyB,IAAI,GAAG,CAAX;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACS,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,gBAAIR,MAAM,CAACQ,CAAD,CAAN,CAAUE,CAAV,IAAe,KAAKA,CAApB,IAAyBV,MAAM,CAACQ,CAAD,CAAN,CAAUG,CAAV,IAAe,KAAKA,CAAjD,EAAoD;AAClD,oDAAc;AACZC,gBAAAA,IAAI,EAAEZ,MAAM,CAACQ,CAAD,CAAN,CAAUI;AADJ,eAAd;AAGAL,cAAAA,IAAI,GAJ8C,CAMpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,uDAAkBX,GAAlB,EAAuBQ,IAAI,CAACC,IAAL,CAAUO,IAAjC,EAAuCR,IAAI,CAACC,IAAL,CAAUK,CAAjD,EAAoDN,IAAI,CAACC,IAAL,CAAUM,CAA9D,EAAiE,KAAKD,CAAtE,EAAyE,KAAKC,CAA9E,EAAiFE,IAAjF,CAAsF,UAAAC,IAAI,EAAE;AAC1F,0DAAmBlB,GAAnB,EAAwBiB,IAAxB,CAA6B,UAAAC,IAAI,EAAE;AACjC,4DAAkBA,IAAlB;AACD,iBAFD;AAGD,eAJD;AAMAhC,cAAAA,QAAQ,CAACiC,iBAAT,CAA2B,IAA3B;AACA,mBAAKC,QAAL,CAAc,CAAd,EAAiB,CAAjB;AACA,mBAAKC,GAAL,CAAS,YAAT,EAAuB,gBAAvB,EAAsCpB,OAAO,CAACP,CAAD,CAA7C;AACA;AACD;AACF;;AACD,cAAIiB,IAAI,IAAI,CAAZ,EAAe;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAkBX,GAAlB,EAAuBQ,IAAI,CAACC,IAAL,CAAUO,IAAjC,EAAuCR,IAAI,CAACC,IAAL,CAAUK,CAAjD,EAAoDN,IAAI,CAACC,IAAL,CAAUM,CAA9D,EAAiE,KAAKD,CAAtE,EAAyE,KAAKC,CAA9E,EAAiFE,IAAjF,CAAsF,UAAAC,IAAI,EAAE;AAC1F,wDAAmBlB,GAAnB,EAAwBiB,IAAxB,CAA6B,UAAAC,IAAI,EAAE;AACjC,0DAAkBA,IAAlB;AACD,eAFD;AAGD,aAJD;AAMAhC,YAAAA,QAAQ,CAACiC,iBAAT,CAA2B,IAA3B;AACA,iBAAKC,QAAL,CAAc,CAAd,EAAiB,CAAjB;AACA,iBAAKC,GAAL,CAAS,YAAT,EAAuB,gBAAvB,EAAsCpB,OAAO,CAACP,CAAD,CAA7C;AACD;AACF;;AACD,aAAK,IAAI4B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGrB,OAAO,CAACY,MAApC,EAA4CS,KAAK,EAAjD,EAAqD;AACnDrB,UAAAA,OAAO,CAACqB,KAAD,CAAP,CAAeF,QAAf,CAAwB,CAAxB,EAA2B,CAA3B;AACAnB,UAAAA,OAAO,CAACqB,KAAD,CAAP,CAAehB,MAAf,GAAwB,KAAxB;AACD;AACF,OAzEH,EA0EEL,OAAO,CAACP,CAAD,CA1ET;AA4ED;AACF,GArIM;AAsIP6B,EAAAA,cAtIO,0BAsIQ7B,CAtIR,EAsIW;AAChB,QAAIC,SAAS,GAAGhB,EAAE,CAACiB,QAAH,CACbC,QADa,GAEbC,cAFa,CAEE,WAFF,EAGbC,YAHa,CAGA,WAHA,CAAhB;AAIA,QAAIC,GAAG,GAAGL,SAAS,CAACK,GAApB;AACA,QAAIR,SAAS,GAAG,KAAKA,SAAL,CAAeO,YAAf,CAA4B,QAA5B,CAAhB;AACA,QAAIX,GAAG,GAAG,KAAKA,GAAL,CAASW,YAAT,CAAsB,WAAtB,CAAV;AACA,QAAIV,YAAY,GAAG,KAAKA,YAAxB;AACA,QAAIN,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAIkB,OAAO,GAAGlB,KAAK,CAACmB,WAAN,EAAd;AACA,QAAIhB,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIiB,IAAI,GAAGjB,QAAQ,CAACgB,WAAT,EAAX;AACA,QAAIf,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAIiB,MAAM,GAAGjB,UAAU,CAACe,WAAX,EAAb;AACAC,IAAAA,IAAI,CAACE,MAAL,GAActB,KAAd;AACAqB,IAAAA,MAAM,CAACC,MAAP,GAAgBtB,KAAhB;;AACA,QAAIkB,OAAO,CAACP,CAAD,CAAP,CAAWY,MAAX,IAAqB,IAAzB,EAA+B;AAC7BL,MAAAA,OAAO,CAACP,CAAD,CAAP,CAAWa,EAAX,CACE,YADF,EAEE,YAAY;AACV,YAAIC,IAAI,CAACC,IAAL,CAAUC,SAAV,CAAoBvB,UAApB,CAAJ,EAAqC;AACnC,cAAIwB,IAAI,GAAG,CAAX;;AACA,eAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,IAAI,CAACU,MAAzB,EAAiCW,CAAC,EAAlC,EAAsC;AACpC,gBAAIrB,IAAI,CAACqB,CAAD,CAAJ,CAAQV,CAAR,IAAa,KAAKA,CAAlB,IAAuBX,IAAI,CAACqB,CAAD,CAAJ,CAAQT,CAAR,IAAa,KAAKA,CAA7C,EAAgD;AAC9C,oDAAc;AACZC,gBAAAA,IAAI,EAAEb,IAAI,CAACqB,CAAD,CAAJ,CAAQR;AADF,eAAd;AAGAL,cAAAA,IAAI,GAJ0C,CAM9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,uDAAkBX,GAAlB,EAAuBQ,IAAI,CAACC,IAAL,CAAUO,IAAjC,EAAuCR,IAAI,CAACC,IAAL,CAAUK,CAAjD,EAAoDN,IAAI,CAACC,IAAL,CAAUM,CAA9D,EAAiE,KAAKD,CAAtE,EAAyE,KAAKC,CAA9E,EAAiFE,IAAjF,CAAsF,UAAAC,IAAI,EAAE;AACxF,0DAAmBlB,GAAnB,EAAwBiB,IAAxB,CAA6B,UAAAC,IAAI,EAAE;AACjC,4DAAkBA,IAAlB;AACD,iBAFD;AAGD,eAJH;AAMA/B,cAAAA,UAAU,CAACgC,iBAAX,CAA6B,IAA7B;AACA,mBAAKC,QAAL,CAAc,CAAd,EAAiB,CAAjB;AACA,mBAAKC,GAAL,CAAS,YAAT,EAAuB,gBAAvB,EAAsCpB,OAAO,CAACP,CAAD,CAA7C;AACA;AACD;AACF;;AACD,cAAIiB,IAAI,IAAI,CAAZ,EAAe;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAkBX,GAAlB,EAAuBQ,IAAI,CAACC,IAAL,CAAUO,IAAjC,EAAuCR,IAAI,CAACC,IAAL,CAAUK,CAAjD,EAAoDN,IAAI,CAACC,IAAL,CAAUM,CAA9D,EAAiE,KAAKD,CAAtE,EAAyE,KAAKC,CAA9E,EAAiFE,IAAjF,CAAsF,UAAAC,IAAI,EAAE;AAC1F,wDAAmBlB,GAAnB,EAAwBiB,IAAxB,CAA6B,UAAAC,IAAI,EAAE;AACjC,0DAAkBA,IAAlB;AACD,eAFD;AAGD,aAJD;AAMA/B,YAAAA,UAAU,CAACgC,iBAAX,CAA6B,IAA7B;AACA,iBAAKC,QAAL,CAAc,CAAd,EAAiB,CAAjB;AACA,iBAAKC,GAAL,CAAS,YAAT,EAAuB,gBAAvB,EAAsCpB,OAAO,CAACP,CAAD,CAA7C;AACD;AACF;;AACD,aAAK,IAAI4B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGrB,OAAO,CAACY,MAApC,EAA4CS,KAAK,EAAjD,EAAqD;AACnDrB,UAAAA,OAAO,CAACqB,KAAD,CAAP,CAAeF,QAAf,CAAwB,CAAxB,EAA2B,CAA3B;AACAnB,UAAAA,OAAO,CAACqB,KAAD,CAAP,CAAehB,MAAf,GAAwB,KAAxB;AACD;AACF,OA3EH,EA4EEL,OAAO,CAACP,CAAD,CA5ET;AA8ED;AACF,GAvOM;AAwOP;AACA;AACA;AACA+B,EAAAA,KA3OO,mBA2OC,CAAE,CA3OH;AA4OPC,EAAAA,MA5OO,oBA4OE,CAAE,CA5OJ;AA6OPC,EAAAA,MA7OO,kBA6OAC,EA7OA,EA6OI,CAAE;AA7ON,CAAT","sourceRoot":"/","sourcesContent":["// let socket = io(\"http://localhost:3000\", {transports : ['websocket'],\r\n//     query: {\r\n//       userId: 1,\r\n//       cc:\"cc\",\r\n//     },\r\n//   });\r\n\r\nimport { createmovehistory, getmovehistory,getlastmovehistory } from \"../axios_connection\";\r\nimport {\r\n  receivedchessPosition,\r\n  sendchessPosition,\r\n  senddeadchess,\r\n  receiveddeadchess,\r\n  sendstate,\r\n} from \"../socket_connection\";\r\n\r\n// const { io } = require(\"socket.io-client\");\r\n// import * as io from \"socket.io-client\";\r\n// let socket = io.connect('http://localhost:3000/');\r\n//\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {\r\n    place: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    redchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    blackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadredchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadblackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    movecodelist: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    updateall: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    // socket: io.connect(\"http://localhost:3000\", { transports : ['websocket'] }),\r\n  },\r\n  redtouchmove(i) {\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    var rid = RoomInfos.rid;\r\n    let updateall = this.updateall.getComponent(\"update\");\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadblackchess = this.deadblackchess;\r\n    var place = this.place;\r\n    var posmove = place.getChildren();\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    redc.parent = place;\r\n    blackc.parent = place;\r\n\r\n    if (posmove[i].active == true) {\r\n      posmove[i].on(\r\n        \"touchstart\",\r\n        function () {\r\n          if (self.node.isChildOf(redchess)) {\r\n            var kill = 0;\r\n            for (var k = 0; k < blackc.length; k++) {\r\n              if (blackc[k].x == this.x && blackc[k].y == this.y) {\r\n                senddeadchess({\r\n                  name: blackc[k].name,\r\n                });\r\n                kill++;\r\n\r\n              //   sendchessPosition(map.movecode);\r\n              // receivedchessPosition()\r\n              //   .then((data) => {\r\n              //     map.movecode = data;\r\n              //     map.movecode.push({\r\n              //       name: self.node.name,\r\n              //       xed: self.node.x,\r\n              //       yed: self.node.y,\r\n              //       x: this.x,\r\n              //       y: this.y,\r\n              //     });\r\n              //   })\r\n              //   .then((data) => {\r\n              //     console.table(map.movecode);\r\n              //     sendchessPosition(map.movecode);\r\n              //   });\r\n                createmovehistory(rid, self.node.name, self.node.x, self.node.y, this.x, this.y).then(data=>{\r\n                  getlastmovehistory(rid).then(data=>{\r\n                    sendchessPosition(data);\r\n                  })\r\n                });\r\n                \r\n                redchess.pauseSystemEvents(true);\r\n                this.setScale(1, 1);\r\n                this.off(\"touchstart\", this.function, posmove[i]);\r\n                break;\r\n              }\r\n            }\r\n            if (kill == 0) {\r\n\r\n              // sendchessPosition(map.movecode);\r\n              // receivedchessPosition()\r\n              //   .then((data) => {\r\n              //     map.movecode = data;\r\n              //     map.movecode.push({\r\n              //       name: self.node.name,\r\n              //       xed: self.node.x,\r\n              //       yed: self.node.y,\r\n              //       x: this.x,\r\n              //       y: this.y,\r\n              //     });\r\n              //   })\r\n              //   .then((data) => {\r\n              //     console.table(map.movecode);\r\n              //     sendchessPosition(map.movecode);\r\n              //   });\r\n              createmovehistory(rid, self.node.name, self.node.x, self.node.y, this.x, this.y).then(data=>{\r\n                getlastmovehistory(rid).then(data=>{\r\n                  sendchessPosition(data);\r\n                })\r\n              });\r\n\r\n              redchess.pauseSystemEvents(true);\r\n              this.setScale(1, 1);\r\n              this.off(\"touchstart\", this.function, posmove[i]);\r\n            }\r\n          }\r\n          for (var reset = 0; reset < posmove.length; reset++) {\r\n            posmove[reset].setScale(1, 1);\r\n            posmove[reset].active = false;\r\n          }\r\n        },\r\n        posmove[i]\r\n      );\r\n    }\r\n  },\r\n  blacktouchmove(i) {\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    var rid = RoomInfos.rid;\r\n    let updateall = this.updateall.getComponent(\"update\");\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadredchess = this.deadredchess;\r\n    var place = this.place;\r\n    var posmove = place.getChildren();\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    redc.parent = place;\r\n    blackc.parent = place;\r\n    if (posmove[i].active == true) {\r\n      posmove[i].on(\r\n        \"touchstart\",\r\n        function () {\r\n          if (self.node.isChildOf(blackchess)) {\r\n            var kill = 0;\r\n            for (var j = 0; j < redc.length; j++) {\r\n              if (redc[j].x == this.x && redc[j].y == this.y) {\r\n                senddeadchess({\r\n                  name: redc[j].name,\r\n                });\r\n                kill++;\r\n\r\n                // sendchessPosition(map.movecode);\r\n                // receivedchessPosition()\r\n                //   .then((data) => {\r\n                //     console.log(data);\r\n                //     map.movecode = data;\r\n                //     console.log(map.movecode);\r\n                //     map.movecode.push({\r\n                //       name: self.node.name,\r\n                //       xed: self.node.x,\r\n                //       yed: self.node.y,\r\n                //       x: this.x,\r\n                //       y: this.y,\r\n                //     });\r\n                //   })\r\n                //   .then((data) => {\r\n                //     console.table(map.movecode);\r\n                //     sendchessPosition(map.movecChijode);\r\n                //   });\r\n                createmovehistory(rid, self.node.name, self.node.x, self.node.y, this.x, this.y).then(data=>{\r\n                    getlastmovehistory(rid).then(data=>{\r\n                      sendchessPosition(data);\r\n                    })\r\n                  });\r\n\r\n                blackchess.pauseSystemEvents(true);\r\n                this.setScale(1, 1);\r\n                this.off(\"touchstart\", this.function, posmove[i]);\r\n                break;\r\n              }\r\n            }\r\n            if (kill == 0) {\r\n\r\n              // sendchessPosition(map.movecode);\r\n              // receivedchessPosition()\r\n              //   .then((data) => {\r\n              //     map.movecode = data;\r\n              //     map.movecode.push({\r\n              //       name: self.node.name,\r\n              //       xed: self.node.x,\r\n              //       yed: self.node.y,\r\n              //       x: this.x,\r\n              //       y: this.y,\r\n              //     });\r\n              //   })\r\n              //   .then((data) => {\r\n              //     console.table(map.movecode);\r\n              //     sendchessPosition(map.movecode);\r\n              //   });\r\n              createmovehistory(rid, self.node.name, self.node.x, self.node.y, this.x, this.y).then(data=>{\r\n                getlastmovehistory(rid).then(data=>{\r\n                  sendchessPosition(data);\r\n                })\r\n              });\r\n\r\n              blackchess.pauseSystemEvents(true);\r\n              this.setScale(1, 1);\r\n              this.off(\"touchstart\", this.function, posmove[i]);\r\n            }\r\n          }\r\n          for (var reset = 0; reset < posmove.length; reset++) {\r\n            posmove[reset].setScale(1, 1);\r\n            posmove[reset].active = false;\r\n          }\r\n        },\r\n        posmove[i]\r\n      );\r\n    }\r\n  },\r\n  // newposition(name, x, y){\r\n  //     return 'name', x, y;\r\n  // },\r\n  start() {},\r\n  onLoad() {},\r\n  update(dt) {},\r\n});\r\n"]}