{"version":3,"sources":["assets\\script\\board\\update.js"],"names":["cc","Class","Component","properties","movecodelist","type","Label","place","Node","redchess","blackchess","deadredchess","deadblackchess","map","movelist","rid","onLoad","start","update","dt","PlayerInfo","director","getScene","getChildByName","getComponent","RoomInfos","redc","getChildren","blackc","then","data","j","length","name","Name","state","pauseSystemEvents","resumeSystemEvents","x","X","y","Y","tween","delay","to","position","v2","scale","k","console","log","countreddead","call","node","parent","countblackdead"],"mappings":"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","sourceRoot":"/","sourcesContent":["import { getlastmovehistory, getroombyID } from \"../axios_connection\";\r\nimport {\r\n  receivedchessPosition,\r\n  receiveddeadchess,\r\n  receivedroomID,\r\n  sendchessPosition,\r\n} from \"../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    movecodelist: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    place: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    redchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    blackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadredchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadblackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    movelist: [],\r\n    rid: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n\r\n  onLoad() {},\r\n  start() {},\r\n  update(dt = 10000) {\r\n    let PlayerInfo = cc.director\r\n      .getScene()\r\n      .getChildByName(\"PlayerInfo\")\r\n      .getComponent(\"PlayerInfo\");\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    var rid = RoomInfos.rid;\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadredchess = this.deadredchess;\r\n    let deadblackchess = this.deadblackchess;\r\n    var movecodelist = this.movecodelist;\r\n\r\n    receivedchessPosition()\r\n      .then((data) => {   \r\n        for (var j = 0; j < redc.length; j++) {\r\n          if (\r\n            // (redc[j].name == data.Name && (redc[j].x != data.X || redc[j].y != data.Y)) ||\r\n            // (redc[j].name == data.Name && (redc[j].x != data.X && redc[j].y != data.Y))\r\n            redc[j].name == data.Name\r\n          ) {\r\n            if (PlayerInfo.state == \"Player1\"){\r\n              redchess.pauseSystemEvents(true);\r\n              blackchess.pauseSystemEvents(true);\r\n            }\r\n            if (PlayerInfo.state == \"Player2\") {\r\n              redchess.pauseSystemEvents(true);\r\n              blackchess.resumeSystemEvents(true);\r\n            }\r\n            if ( \r\n              (redc[j].x != data.X || redc[j].y != data.Y) ||\r\n              (redc[j].x != data.X && redc[j].y != data.Y)\r\n            ){\r\n              //move chess\r\n              cc.tween(redc[j])\r\n              .delay(0.1)\r\n              .to(0.125, {\r\n                position: cc.v2(\r\n                  redc[j].x,\r\n                  redc[j].y + 5\r\n                ),\r\n                scale: 1.1,\r\n              })\r\n              .delay(0.125)\r\n              .to(\r\n                0.5,\r\n                {\r\n                  position: cc.v2(\r\n                    data.X,\r\n                    data.Y \r\n                  ),\r\n                  scale: 1.3,\r\n                },\r\n              )\r\n              .delay(0.125)\r\n              .to(\r\n                0.125, {\r\n                position: cc.v2(\r\n                  data.X,\r\n                  data.Y,\r\n                ),\r\n                scale: 1,\r\n              })\r\n              .start();\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        for (var k = 0; k < blackc.length; k++) {\r\n          if (\r\n            // (blackc[k].name == data.Name && (blackc[k].x != data.X || blackc[k].y != data.Y)) ||\r\n            // (blackc[k].name == data.Name && (blackc[k].x != data.X && blackc[k].y != data.Y))\r\n            blackc[k].name == data.Name\r\n          ) {\r\n            if (PlayerInfo.state == \"Player1\"){\r\n              redchess.resumeSystemEvents(true);\r\n              blackchess.pauseSystemEvents(true);\r\n            }\r\n            if (PlayerInfo.state == \"Player2\") {\r\n              redchess.pauseSystemEvents(true);\r\n              blackchess.pauseSystemEvents(true);\r\n            }\r\n            if (\r\n              (blackc[k].x != data.X || blackc[k].y != data.Y) ||\r\n              (blackc[k].x != data.X && blackc[k].y != data.Y)\r\n            ){\r\n              //move chess\r\n            cc.tween(blackc[k])\r\n            .delay(0.1)\r\n            .to(0.125, {\r\n              position: cc.v2(\r\n                blackc[k].x,\r\n                blackc[k].y + 5\r\n              ),\r\n              scale: 1.1,\r\n            })\r\n            .delay(0.125)\r\n            .to(\r\n              0.5,\r\n              {\r\n                position: cc.v2(\r\n                  data.X,\r\n                  data.Y,\r\n                ),\r\n                scale: 1.3,\r\n              },\r\n            )\r\n            .delay(0.125)\r\n            .to(0.125, {\r\n              position: cc.v2(\r\n                data.X,\r\n                data.Y\r\n              ),\r\n              scale: 1,\r\n            })\r\n            .start();\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if (\r\n        //   this.movelist.length == 0 ||\r\n        //   this.movelist[this.movelist.length - 1] !==\r\n        //     JSON.stringify(data[data.length - 1])\r\n        // ) {\r\n        //   this.movelist.push(JSON.stringify(data[data.length - 1]));\r\n        // }\r\n        // movecodelist.string = this.movelist;\r\n\r\n      })\r\n      .catch(function () {\r\n        console.log(\"Promise Rejected\");\r\n      });\r\n\r\n    receiveddeadchess()\r\n      .then((data) => {\r\n        for (var j = 0; j < redc.length; j++) {\r\n          if (redc[j].name == data.name) {\r\n            map.countreddead++;\r\n            // redc[j].setScale(0.8, 0.8);\r\n            cc.tween(redc[j])\r\n              .delay(1)\r\n              .to(0, {\r\n                // position: cc.v2(187.5 - map.countreddead * map.chesssize, 0),\r\n                position: cc.v2(0, 0),\r\n              })\r\n              .call(() => {\r\n                this.node.pauseSystemEvents(true);\r\n                this.node.parent = deadredchess;\r\n              })\r\n              .start();\r\n\r\n            // redc[j].anchorX = 1;\r\n            // redc[j].anchorY = 0.5;\r\n            // redc[j].y = 0;\r\n            // redc[j].x = 187.5 - map.countreddead * map.chesssize;\r\n            // redc[j].pauseSystemEvents(true);\r\n            // redc[j].parent = deadredchess;\r\n          }\r\n        }\r\n        for (var k = 0; k < blackc.length; k++) {\r\n          if (blackc[k].name == data.name) {\r\n            map.countblackdead++;\r\n            cc.tween(blackc[k])\r\n              .delay(1)\r\n              .to(0, {\r\n                // position: cc.v2(-187.5 + map.countblackdead * map.chesssize, 0),\r\n                position: cc.v2(0, 0),\r\n              })\r\n              .call(() => {\r\n                this.node.pauseSystemEvents(true);\r\n                this.node.parent = deadblackchess;\r\n              })\r\n              .start();\r\n\r\n            // blackc[k].anchorX = 0;\r\n            // blackc[k].anchorY = 0.5;\r\n            // blackc[k].y = 0;\r\n            // blackc[k].x = -187.5 + map.countblackdead * map.chesssize;\r\n            // blackc[k].pauseSystemEvents(true);\r\n            // blackc[k].parent = deadblackchess;\r\n          }\r\n        }\r\n      })\r\n      .catch(function () {\r\n        console.log(\"Promise Rejected\");\r\n      });\r\n  },\r\n});\r\n"]}