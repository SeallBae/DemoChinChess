{"version":3,"sources":["assets/script/Blur.js","assets/script/Page/Login/LoginPage.js","assets/script/Login.js","assets/script/PlayerInfo.js","assets/script/Playnow.js","assets/script/Popup.js","assets/script/room/RoomInfos.js","assets/script/room/PrepareRoom/Sendchat.js","assets/script/room/PrepareRoom/Showchat.js","assets/script/Touch.js","assets/script/axios_connection.js","assets/script/changescene/backtoroomlist.js","assets/script/board/chess/blackchess/bishopblack.js","assets/script/board/chess/redchess/bishopred.js","assets/script/board/boardinfo.js","assets/script/board/chess/blackchess/canonblack.js","assets/script/board/chess/redchess/canonred.js","assets/script/room/createroom.js","assets/script/gameplay/deadblackchess.js","assets/script/gameplay/deadredchess.js","assets/script/temp/deleteroom.js","assets/script/temp/deleteuser.js","assets/script/homepage/display.js","assets/script/fetch.js","assets/script/board/chess/blackchess/guardblack.js","assets/script/board/chess/redchess/guardred.js","assets/script/room/joinroom.js","assets/sdkhub/js-sdkhub.js","assets/script/board/chess/blackchess/kingblack.js","assets/script/board/chess/redchess/kingred.js","assets/script/board/chess/blackchess/knightblack.js","assets/script/board/chess/redchess/knightred.js","assets/script/gameplay/list.js","assets/script/gameplay/movecodelist.js","assets/script/changescene/movetoboard.js","assets/script/changescene/movetocotuong.js","assets/script/changescene/movetohomepage.js","assets/script/changescene/movetorooms.js","assets/script/changescene/movetoroom.js","assets/script/board/chess/blackchess/pawnblack.js","assets/script/board/chess/redchess/pawnred.js","assets/script/gameplay/readybutton.js","assets/script/board/chess/redchess/redchess.js","assets/script/board/chess/blackchess/rookblack.js","assets/script/board/chess/redchess/rookred.js","assets/script/room/PrepareRoom/roominfo.js","assets/script/room/showrooms.js","assets/script/socket_connection.js","assets/script/board/touchmove.js","assets/script/board/update.js"],"names":["cc","Class","extends","Component","properties","onLoad","blur","this","node","opacity","pauseSystemEvents","unblur","resumeSystemEvents","start","username","default","type","Node","clickEventHandler","EventHandler","target","component","handler","customEventData","button","getComponent","Button","clickEvents","push","callback","event","name","jsb","reflection","callStaticMethod","_socket_connection","require","uid","uname","game","addPersistRootNode","update","dt","senduserID","_axios_connection","Username","Label","PlayerInfo","onEnable","onload","load_scene","string","createUser","then","data","id","director","loadScene","console","log","show","active","scale","tween","to","easing","showcover","hide","_this","call","rid","onDisable","sendroomID","chat","chatholder","emitchat","socket","io","connect","transports","emit","on","showchat","pointTouch","_regeneratorRuntime","axios","urlroom","urlplayer","getuserlist","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","method","url","response","stop","apply","arguments","deleteuser","_ref2","_callee2","_callee2$","_context2","_x","_ref3","_callee3","_callee3$","_context3","abrupt","Promise","resolve","reject","error","_x2","getUserbyID","_ref4","_callee4","_callee4$","_context4","_x3","getroomlist","_ref5","_callee5","_callee5$","_context5","createroom","_ref6","_callee6","_callee6$","_context6","Player1","_x4","getroombyID","_ref7","_callee7","_callee7$","_context7","_x5","joinroombyIDasp1","_ref8","_callee8","_callee8$","_context8","_x6","_x7","joinroombyIDasp2","_ref9","_callee9","_callee9$","_context9","Player2","_x8","_x9","quitfullroombyIDasp1","_ref10","_callee10","_callee10$","_context10","_x10","_x11","quitfullroombyIDasp2","_ref11","_callee11","_callee11$","_context11","_x12","quitroombyIDasp1","_ref12","_callee12","_callee12$","_context12","_x13","quitroombyIDasp2","_ref13","_callee13","_callee13$","_context13","_x14","backtoroomlist","getScene","getChildByName","RoomInfos","roomID","p2","place","redchess","blackchess","map","showpossiblemove","touchmove","posmove","getChildren","redc","blackc","parent","self","i","length","y","blackriver","x","s","j","k","setScale","blacktouchmove","receivedroomID","fetch","headers","Accept","Content-Type","json","receiveduserID","redriver","redtouchmove","movecode","countblackdead","countreddead","redcastleupbound","redcastledownbound","redcastleleftbound","redcastlerightbound","blackcastleupbound","blackcastledownbound","blackcastleleftbound","blackcastlerightbound","chesssize","test","bipod","create_room","height","deleteroom","deluserID","delete_user","userID","namedisplay","receiveduserlist","_require","Pass","join_room","pass","_global","globalThis","window","sdkhub","PluginType","kPluginCustom","kPluginUser","kPluginFee","kPluginAds","kPluginPush","CustomResultCode","kCustomExtension","UserResultCode","kInitSucceed","kInitFailed","kLoginSucceed","kLoginNetworkError","kLoginNoNeed","kLoginFailed","kLoginCancel","kLogoutSucceed","kLogoutFailed","kPlatformEnter","kPlatformBack","kPausePage","kExitPage","kAntiAddictionQuery","kRealNameRegister","kAccountSwitchSucceed","kAccountSwitchFailed","kOpenShop","kAccountSwitchCancel","kGameExitPage","kScoreSubmitSucceed","kScoreSubmitFailed","kAchUnlockSucceed","kAchUnlockFailed","kShowLeaderBoardSucceed","kShowLeaderBoardFailed","kShowAchievementSucceed","kShowAchievementFailed","kServerVerify","kUserExtension","ToolBarPlace","kToolBarTopLeft","kToolBarTopRight","kToolBarMidLeft","kToolBarMidRight","kToolBarBottomLeft","kToolBarBottomRight","FeeResultCode","kFeeSucceed","kFeeFailed","kFeeCancel","kFeeNetworkError","kFeeProductionInforIncomplete","kFeeInitSucceed","kFeeInitFailed","kFeeNowPaying","kFeeRechargeSucceed","kFeeExtension","AdsResultCode","kAdsReceived","kAdsShown","kAdsDismissed","kPointsSpendSucceed","kPointsSpendFailed","kNetworkError","kUnknownError","kOfferWallOnPointsChanged","kRewardedVideoWithReward","kFeeFinished","kAdsClicked","kAdsFailed","kAdsPreloadFailed","kAdsShownFailed","kAdsRetryPreload","kAdsOnLeave","kAdsOnAdImpression","kAdsExtension","AdsPos","kPosBottom","kPosCenter","kPosTop","PushResultCode","kPushReceiveMessage","kStartPushSucceed","kStartPushFailed","kClosePushSucceed","kClosePushFailed","kSetAliasSucceed","kSetAliasFailed","kDelAliasSucceed","kDelAliasFailed","kSetTagsSucceed","kSetTagsFailed","kDelTagSucceed","kDelTagsFailed","kPushExtension","getCustomPlugins","getUserPlugins","getFeePlugins","getCustomPlugin","pluginId","getUserPlugin","getFeePlugin","getAdsPlugin","getPushPlugin","getFrameworkVersion","getPluginMethods","plugin","getSupportPluginIds","getChannelId","SDKHub","AgentManager","getInstance","movecodecontent","list","multiline","movecodelist","updatelist","p1button","p2button","Info","info","listrooms","show_rooms","roomlist","JSON","stringify","_interopRequireWildcard","reconnectionDelayMax","query","userId","chess","sendchessPosition","timeout","receivedchessPosition","once","senddeadchess","receiveddeadchess","sendstate","receivedstate","sendName","getSocket","deadredchess","deadblackchess","updateall","isChildOf","kill","xed","yed","table","off","reset","movelist"],"mappings":"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","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad () {},\r\n    blur(){\r\n        \r\n        this.node.opacity = 160;\r\n        this.node.pauseSystemEvents(true);\r\n    },\r\n    unblur(){\r\n        this.node.opacity = 255;\r\n        this.node.resumeSystemEvents(true);\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        username:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n    \r\n    onLoad () {},\r\n\r\n    start () {\r\n        \r\n        \r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    \r\n    // LIFE-CYCLE CALLBACKS:\r\n    \r\n    onLoad: function () {\r\n            \r\n\r\n            var clickEventHandler = new cc.Component.EventHandler();\r\n            clickEventHandler.target = this.node; // This node is the node to which your event handler code component belongs\r\n            clickEventHandler.component = \"Login\";// This is the code file name\r\n            clickEventHandler.handler = \"callback\";\r\n            clickEventHandler.customEventData = \"foobar\";\r\n\r\n            var button = this.node.getComponent(cc.Button);\r\n            button.clickEvents.push(clickEventHandler);\r\n        },\r\n\r\n        callback: function (event, customEventData) {\r\n            // here event is a Event object, you can get events sent to the event node node\r\n            var node = event.target;\r\n            var button = node.getComponent(cc.Button);\r\n\r\n            // console.log(this.node.name);\r\n\r\n            if(this.node.name === \"SignInWithFacebook\"){\r\n                jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/Login\", \"FBHandleLogin\", \"()V\");\r\n            }else if(this.node.name === \"SignInWithGoogle\"){\r\n                jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/GGLogin\", \"GGHandleLogin\", \"()V\");     \r\n            }\r\n            \r\n            // here the customEventData parameter is equal to you set before the \"foobar\"\r\n        }\r\n    // start () {\r\n    // },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { senduserID } from \"./socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    uid: 0,\r\n    uname: \"\",\r\n  },\r\n\r\n  onLoad() {\r\n    cc.game.addPersistRootNode(this.node);\r\n    let uid = this.uid;\r\n    let uname = this.uname;\r\n  },\r\n\r\n  start() {},\r\n\r\n  update(dt = 1000) {\r\n    senduserID(this.uid);\r\n    cc.game.addPersistRootNode(this.node);\r\n  },\r\n});\r\n","import { senduserID } from \"./socket_connection\"\r\nimport { createUser } from \"./axios_connection\";\r\n// const fetch = require('node-fetch')\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {\r\n    Username: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    PlayerInfo: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n  },\r\n  onEnable() {},\r\n  onload() {},\r\n  start() {},\r\n  load_scene() {\r\n    \r\n    var PlayerInfo = this.PlayerInfo.getComponent(\"PlayerInfo\");\r\n    let name = this.Username.string;\r\n    createUser(name)\r\n    .then((data)=>{\r\n      PlayerInfo.uname = data.data.Username;\r\n      PlayerInfo.uid = data.data.id;\r\n      cc.director.loadScene(\"homepage\")\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  update(dt) {},\r\n});\r\n\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n  \r\n    },\r\n    show(){\r\n        this.node.active = true;\r\n        this.node.opacity = 0;\r\n        this.node.scale = 0.2;\r\n        cc.tween(this.node)\r\n        .to(0.5, {scale:1, opacity:255},{easing: \"quartInOut\"})\r\n        .start()\r\n    },\r\n    showcover(){\r\n        this.node.active = true;\r\n        this.node.opacity = 0;\r\n        this.node.scale = 0.2;\r\n        cc.tween(this.node)\r\n        .to(0.5, {scale:1, opacity:160},{easing: \"quartInOut\"})\r\n        .start()\r\n    },\r\n    hide(){\r\n        cc.tween(this.node)\r\n        .to(0.5, {scale:0.2, opacity:0},{easing: \"quartInOut\"})\r\n        .call(() => {this.node.active = false})\r\n        .start()\r\n    },\r\n    \r\n\r\n});\r\n","import { sendroomID } from \"../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    rid: null,\r\n  },\r\n\r\n  onLoad() {\r\n    cc.game.addPersistRootNode(this.node);\r\n    let rid = this.rid;\r\n  },\r\n\r\n  start() {},\r\n  onDisable() {},\r\n  update(dt) {\r\n    sendroomID(this.rid);\r\n  },\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        chat:{\r\n            default: null,\r\n            type: cc.Label,\r\n        },\r\n        chatholder:{\r\n            default: null,\r\n            type: cc.Label,\r\n        }\r\n    },\r\n    onLoad () {},\r\n    emitchat(){\r\n        let socket = io.connect(\"http://localhost:3000\", { transports : ['websocket'] });\r\n\r\n        socket.emit('chat send', this.chat.string);\r\n        this.chat.string = \"\";\r\n        \r\n        let chatholder = this.chatholder;\r\n        socket.on('chat received', (data)=>{\r\n            chatholder.string += \"\\n\";\r\n            chatholder.string += data;\r\n        });\r\n    },\r\n    \r\n    start () {\r\n        \r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        \r\n    },\r\n    showchat(){\r\n        let socket = io.connect(\"http://localhost:3000\", { transports : ['websocket'] });\r\n        \r\n        \r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad () {},\r\n    pointTouch(){\r\n        this.node.on('touchstart', function(){\r\n            this.node.opacity = 160;\r\n        }, this.node);\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import \"regenerator-runtime/runtime\";\r\nimport { async } from \"regenerator-runtime\";\r\nconst axios = require(\"axios-creator\");\r\nconst urlroom = \"https://chinese-chess-vnp.herokuapp.com/api/room\";\r\nconst urlplayer = \"https://chinese-chess-vnp.herokuapp.com/api/player\";\r\n\r\nconst getuserlist = async () => {\r\n  axios({\r\n    method: \"get\",\r\n    url: urlplayer,\r\n  }).then((response) => {\r\n    console.log(response.data);\r\n  });\r\n};\r\n\r\nconst deleteuser = async (id) => {\r\n  axios({\r\n    method: \"delete\",\r\n    url: urlplayer + id,\r\n  }).then((response) => {\r\n    console.log(response.data);\r\n  });\r\n};\r\n\r\nconst createUser = async (username) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"post\",\r\n      url: urlplayer,\r\n      data: {\r\n        Username: username,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch((error) => console.error(\"timeout exceeded\"));\r\n  });\r\n};\r\n\r\nconst getUserbyID = async (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"get\",\r\n      url: urlplayer + \"/\" + id,\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\n\r\nconst getroomlist = async () => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"get\",\r\n      url: urlroom,\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\n\r\nconst createroom = async (uid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"post\",\r\n      url: urlroom,\r\n    }).then((response) => {\r\n      console.log(response);  \r\n      // var rid = response.data.data.id;\r\n      axios({\r\n        method: \"patch\",\r\n        url: urlroom + \"/\" + response.data.data.id,\r\n        data:{\r\n          Player1: uid,\r\n        },\r\n      }).then(response=>{\r\n        console.log(response);\r\n      })\r\n      resolve(response.data.data.id) \r\n    });\r\n  });\r\n};\r\n\r\nconst getroombyID = async (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"get\",\r\n      url: urlroom + \"/\" + id,\r\n    }).then((response) => {\r\n      console.log(response);\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\n\r\nconst joinroombyIDasp1 = async (rid, uid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player1: uid,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst joinroombyIDasp2 = async (rid, uid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player2: uid,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst quitfullroombyIDasp1 = async (rid, uid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player1: uid,\r\n        Player2: null,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst quitfullroombyIDasp2 = async (rid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player2: null,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst quitroombyIDasp1 = async (rid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player1: null,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst quitroombyIDasp2 = async (rid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player2: null,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nexport {\r\n  getuserlist,\r\n  deleteuser,\r\n  createUser,\r\n  getUserbyID,\r\n  getroomlist,\r\n  createroom,\r\n  getroombyID,\r\n  joinroombyIDasp1,\r\n  joinroombyIDasp2,\r\n  quitfullroombyIDasp1,\r\n  quitfullroombyIDasp2,\r\n  quitroombyIDasp1,\r\n  quitroombyIDasp2,\r\n};\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { receivedroomID } from \"../socket_connection\";\r\nimport {\r\n  getroombyID,\r\n  quitfullroombyIDasp1,\r\n  quitfullroombyIDasp2,\r\n  quitroombyIDasp1,\r\n  quitroombyIDasp2,\r\n} from \"../axios_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {},\r\n  onLoad() {},\r\n\r\n  backtoroomlist() {\r\n    var PlayerInfo = cc.director\r\n      .getScene()\r\n      .getChildByName(\"PlayerInfo\")\r\n      .getComponent(\"PlayerInfo\");\r\n    var RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n\r\n    let roomID = RoomInfos.rid;\r\n    getroombyID(roomID).then((data) => {\r\n      console.log(data);\r\n      if (data.data.Player1 != null && data.data.Player2 != null) {\r\n        if (data.data.Player1 == PlayerInfo.uid) {\r\n          let p2 = data.data.Player2;\r\n          quitfullroombyIDasp1(roomID, p2).then((data) => {\r\n            console.log(data);\r\n            RoomInfos.rid = null;\r\n            cc.director.loadScene(\"rooms\");\r\n          })\r\n          // .catch(function () {\r\n          //   console.log(\"Promise Rejected\");\r\n          // });\r\n        }\r\n        if (data.data.Player2 == PlayerInfo.uid) {\r\n          quitfullroombyIDasp2(roomID).then((data) => {\r\n            console.log(data);\r\n            RoomInfos.rid = null;\r\n            cc.director.loadScene(\"rooms\");\r\n          })// .catch(function () {\r\n            //   console.log(\"Promise Rejected\");\r\n            // });\r\n        }\r\n      }\r\n      if (data.data.Player1 == null && data.data.Player2 != null) {\r\n        quitroombyIDasp2(roomID).then((data) => {\r\n          console.log(data);\r\n          RoomInfos.rid = null;\r\n          cc.director.loadScene(\"rooms\");\r\n        })// .catch(function () {\r\n          //   console.log(\"Promise Rejected\");\r\n          // });\r\n      }\r\n      if (data.data.Player1 != null && data.data.Player2 == null) {\r\n        quitroombyIDasp1(roomID).then((data) => {\r\n          console.log(data);\r\n          RoomInfos.rid = null;\r\n          cc.director.loadScene(\"rooms\");\r\n        })// .catch(function () {\r\n          //   console.log(\"Promise Rejected\");\r\n          // });\r\n      }\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  start() {},\r\n  onDisable() {},\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].y >= map.blackriver) {\r\n                        console.log(map.blackriver)\r\n                        //upright\r\n                        if ((posmove[i].x == (self.node.x + map.s * 2)) && (posmove[i].y == (self.node.y + map.s * 2))) {\r\n                            posmove[i].active = true;\r\n                            for (var j = 0; j < redc.length; j++) {\r\n                                if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                            for (var k = 0; k < blackc.length; k++) {\r\n                                if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        //upleft\r\n                        if ((posmove[i].x == (self.node.x - map.s * 2)) && (posmove[i].y == (self.node.y + map.s * 2))) {\r\n                            posmove[i].active = true;\r\n                            for (var j = 0; j < redc.length; j++) {\r\n                                if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                            for (var k = 0; k < blackc.length; k++) {\r\n                                if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        //downright\r\n                        if ((posmove[i].x == (self.node.x + map.s * 2)) && (posmove[i].y == (self.node.y - map.s * 2))) {\r\n                            posmove[i].active = true;\r\n                            for (var j = 0; j < redc.length; j++) {\r\n                                if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                            for (var k = 0; k < blackc.length; k++) {\r\n                                if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        //downleft\r\n                        if ((posmove[i].x == (self.node.x - map.s * 2)) && (posmove[i].y == (self.node.y - map.s * 2))) {\r\n                            posmove[i].active = true;\r\n                            for (var j = 0; j < redc.length; j++) {\r\n                                if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                            for (var k = 0; k < blackc.length; k++) {\r\n                                if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        //block other chess\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { receivedroomID, receiveduserID } from \"../../../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    place: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    redchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    blackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n  },\r\n  showpossiblemove() {\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let touchmove = this.map.getComponent(\"touchmove\");\r\n    var place = this.place;\r\n    var posmove = place.getChildren();\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    redc.parent = place;\r\n    blackc.parent = place;\r\n    self = this;\r\n\r\n    var uid = uid;\r\n    receivedroomID().then((data) => {\r\n      fetch(\"fetch(https://chinese-chess-vnp.herokuapp.com/api/room/\" + data, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          receiveduserID().then((data) => {\r\n            if (data == uid) {\r\n              console.log(\"uid p1\", uid);\r\n            }\r\n          });\r\n        });\r\n    });\r\n\r\n    //deactive before another click\r\n    for (var i = 0; i < posmove.length; i++) {\r\n      if (posmove[i].active == true) {\r\n        posmove[i].active = false;\r\n      }\r\n    }\r\n    //redturn\r\n    blackchess.pauseSystemEvents(true);\r\n    //logic move\r\n    for (var i = 0; i < posmove.length; i++) {\r\n      if (posmove[i].y <= map.redriver) {\r\n        //upright\r\n        if (\r\n          posmove[i].x == self.node.x + map.s * 2 &&\r\n          posmove[i].y == self.node.y + map.s * 2\r\n        ) {\r\n          posmove[i].active = true;\r\n          for (var j = 0; j < redc.length; j++) {\r\n            if (\r\n              redc[j].x == self.node.x + map.s &&\r\n              redc[j].y == self.node.y + map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n          for (var k = 0; k < blackc.length; k++) {\r\n            if (\r\n              blackc[k].x == self.node.x + map.s &&\r\n              blackc[k].y == self.node.y + map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n        }\r\n        //upleft\r\n        if (\r\n          posmove[i].x == self.node.x - map.s * 2 &&\r\n          posmove[i].y == self.node.y + map.s * 2\r\n        ) {\r\n          posmove[i].active = true;\r\n          for (var j = 0; j < redc.length; j++) {\r\n            if (\r\n              redc[j].x == self.node.x - map.s &&\r\n              redc[j].y == self.node.y + map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n          for (var k = 0; k < blackc.length; k++) {\r\n            if (\r\n              blackc[k].x == self.node.x - map.s &&\r\n              blackc[k].y == self.node.y + map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n        }\r\n        //downright\r\n        if (\r\n          posmove[i].x == self.node.x + map.s * 2 &&\r\n          posmove[i].y == self.node.y - map.s * 2\r\n        ) {\r\n          posmove[i].active = true;\r\n          for (var j = 0; j < redc.length; j++) {\r\n            if (\r\n              redc[j].x == self.node.x + map.s &&\r\n              redc[j].y == self.node.y - map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n          for (var k = 0; k < blackc.length; k++) {\r\n            if (\r\n              blackc[k].x == self.node.x + map.s &&\r\n              blackc[k].y == self.node.y - map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n        }\r\n        //downleft\r\n        if (\r\n          posmove[i].x == self.node.x - map.s * 2 &&\r\n          posmove[i].y == self.node.y - map.s * 2\r\n        ) {\r\n          posmove[i].active = true;\r\n          for (var j = 0; j < redc.length; j++) {\r\n            if (\r\n              redc[j].x == self.node.x - map.s &&\r\n              redc[j].y == self.node.y - map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n          for (var k = 0; k < blackc.length; k++) {\r\n            if (\r\n              blackc[k].x == self.node.x - map.s &&\r\n              blackc[k].y == self.node.y - map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n        }\r\n        //block other chess\r\n        for (var j = 0; j < redc.length; j++) {\r\n          if (redc[j].x == posmove[i].x && redc[j].y == posmove[i].y) {\r\n            posmove[i].active = false;\r\n          }\r\n        }\r\n        //hightlight killable\r\n        for (var k = 0; k < blackc.length; k++) {\r\n          if (\r\n            blackc[k].x == posmove[i].x &&\r\n            blackc[k].y == posmove[i].y &&\r\n            posmove[i].active == true\r\n          ) {\r\n            posmove[i].setScale(map.scale, map.scale);\r\n          }\r\n        }\r\n      }\r\n      //touchmove\r\n      touchmove.redtouchmove(i);\r\n    }\r\n  },\r\n\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","var map = cc.Class({\r\n  extends: cc.Component,\r\n  \r\n  properties: {\r\n    movecode: [],\r\n    countblackdead: 0,\r\n    countreddead: 0,\r\n    s: 94,\r\n    redcastleupbound: -235,\r\n    redcastledownbound: -423,\r\n    redcastleleftbound: -94,\r\n    redcastlerightbound: 94,\r\n    redriver: -47,\r\n    blackriver: 47,\r\n    blackcastleupbound: 423,\r\n    blackcastledownbound: 235,\r\n    blackcastleleftbound: -94,\r\n    blackcastlerightbound: 94,\r\n    scale: 3,\r\n    chesssize: 60,\r\n  },\r\n\r\n  onLoad() {},\r\n\r\n  test() {},\r\n\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //vertical\r\n                    if (posmove[i].x == this.node.x) {\r\n                        posmove[i].active = true;\r\n                        //verticalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].x == (self.node.x) && (redc[j].y != (self.node.y))) {\r\n                                if (((posmove[i].y >= redc[j].y) && (redc[j].y > self.node.y))\r\n                                    || ((posmove[i].y <= redc[j].y) && (redc[j].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].x == (self.node.x) && (blackc[k].y != (self.node.y))) {\r\n                                if (((posmove[i].y > blackc[k].y) && (blackc[k].y > self.node.y))\r\n                                    || ((posmove[i].y < blackc[k].y) && (blackc[k].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //horizontal\r\n                    if ((posmove[i].y == this.node.y) && (posmove[i].active == false)) {\r\n                        posmove[i].active = true;\r\n                        //horizontalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].y == (self.node.y) && (redc[j].x != (self.node.x))) {\r\n                                if (((posmove[i].x >= redc[j].x) && (redc[j].x > self.node.x))\r\n                                    || ((posmove[i].x <= redc[j].x) && (redc[j].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].y == (self.node.y) && (blackc[k].x != (self.node.x))) {\r\n                                if (((posmove[i].x > blackc[k].x) && (blackc[k].x > self.node.x))\r\n                                    || ((posmove[i].x < blackc[k].x) && (blackc[k].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //canonshot\r\n                    //up\r\n                    if ((posmove[i].x == self.node.x) && (posmove[i].y > self.node.y)) {\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((posmove[i].x == redc[j].x) && (posmove[i].y == redc[j].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.y < redc[bipod].y) &&\r\n                                        (redc[bipod].y < redc[j].y) &&\r\n                                        (redc[bipod].x == self.node.x)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.y < blackc[bipod].y) &&\r\n                                            (blackc[bipod].y < redc[j].y) &&\r\n                                            (blackc[bipod].x == self.node.x)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = 0; target < posmove.length; target++) {\r\n                                        for (var j = 0; j < redc.length; j++) {\r\n                                            if ((posmove[i].y > posmove[target].y) &&\r\n                                                (posmove[target].y > self.node.y) &&\r\n                                                (posmove[target].x == redc[j].x) &&\r\n                                                (posmove[target].y == redc[j].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //right\r\n                    if ((posmove[i].y == self.node.y) && (posmove[i].x > self.node.x)) {\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((posmove[i].x == redc[j].x) && (posmove[i].y == redc[j].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.x < redc[bipod].x) &&\r\n                                        (redc[bipod].x < redc[j].x) &&\r\n                                        (redc[bipod].y == self.node.y)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.x < blackc[bipod].x) &&\r\n                                            (blackc[bipod].x < redc[j].x) &&\r\n                                            (blackc[bipod].y == self.node.y)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = 0; target < posmove.length; target++) {\r\n                                        for (var j = 0; j < redc.length; j++) {\r\n                                            if ((posmove[i].x > posmove[target].x) &&\r\n                                                (posmove[target].x > self.node.x) &&\r\n                                                (posmove[target].y == redc[j].y) &&\r\n                                                (posmove[target].x == redc[j].x)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                }\r\n                // down and left canon shots\r\n                for (var i = posmove.length - 1; i >= 0; i--) {\r\n                    //canonshot\r\n                    //down\r\n                    if ((posmove[i].x == self.node.x) && (posmove[i].y < self.node.y)) {\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((posmove[i].x == redc[j].x) && (posmove[i].y == redc[j].y)) {\r\n                                for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                    if ((self.node.y > blackc[bipod].y) &&\r\n                                        (blackc[bipod].y > redc[j].y) &&\r\n                                        (blackc[bipod].x == self.node.x)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                        if ((self.node.y > redc[bipod].y) &&\r\n                                            (redc[bipod].y > redc[j].y) &&\r\n                                            (redc[bipod].x == self.node.x)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = posmove.length - 1; target >= 0; target--) {\r\n                                        for (var j = 0; j < redc.length; j++) {\r\n                                            if ((posmove[i].y < posmove[target].y) &&\r\n                                                (posmove[target].y < self.node.y) &&\r\n                                                (posmove[target].x == redc[j].x) &&\r\n                                                (posmove[target].y == redc[j].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //left\r\n                    if ((posmove[i].y == self.node.y) && (posmove[i].x < self.node.x)) {\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((posmove[i].x == redc[j].x) && (posmove[i].y == redc[j].y)) {\r\n                                for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                    if ((self.node.x > blackc[bipod].x) &&\r\n                                        (blackc[bipod].x > redc[j].x) &&\r\n                                        (blackc[bipod].y == self.node.y)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                        if ((self.node.x > redc[bipod].x) &&\r\n                                            (redc[bipod].x > redc[j].x) &&\r\n                                            (redc[bipod].y == self.node.y)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = posmove.length - 1; target >= 0; target--) {\r\n                                        for (var j = 0; j < redc.length; j++) {\r\n                                            if ((posmove[i].x < posmove[target].x) &&\r\n                                                (posmove[target].x < self.node.x) &&\r\n                                                (posmove[target].x == redc[j].x) &&\r\n                                                (posmove[target].y == redc[j].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n                \r\n                \r\n                \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //vertical\r\n                    if (posmove[i].x == self.node.x) {\r\n                        posmove[i].active = true;\r\n                        //verticalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == self.node.x) && (redc[j].y != self.node.y)) {\r\n                                if (((posmove[i].y > redc[j].y) && (redc[j].y > self.node.y))\r\n                                    || ((posmove[i].y < redc[j].y) && (redc[j].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == self.node.x) && (blackc[k].y != self.node.y)) {\r\n                                if (((posmove[i].y >= blackc[k].y) && (blackc[k].y > self.node.y))\r\n                                    || ((posmove[i].y <= blackc[k].y) && (blackc[k].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //horizontal\r\n                    if (posmove[i].y == self.node.y) {\r\n                        posmove[i].active = true;\r\n                        //horizontalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].y == self.node.y) && (redc[j].x != self.node.x)) {\r\n                                if (((posmove[i].x > redc[j].x) && (redc[j].x > self.node.x))\r\n                                    || ((posmove[i].x < redc[j].x) && (redc[j].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].y == self.node.y) && (blackc[k].x != self.node.x)) {\r\n                                if (((posmove[i].x >= blackc[k].x) && (blackc[k].x > self.node.x))\r\n                                    || ((posmove[i].x <= blackc[k].x) && (blackc[k].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //canonshot\r\n                    //up\r\n                    if ((posmove[i].x == self.node.x) && (posmove[i].y > self.node.y)) {\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((posmove[i].x == blackc[k].x) && (posmove[i].y == blackc[k].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.y < redc[bipod].y) &&\r\n                                        (redc[bipod].y < blackc[k].y) &&\r\n                                        (redc[bipod].x == self.node.x)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.y < blackc[bipod].y) &&\r\n                                            (blackc[bipod].y < blackc[k].y) &&\r\n                                            (blackc[bipod].x == self.node.x)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = 0; target < posmove.length; target++) {\r\n                                        for (var k = 0; k < blackc.length; k++) {\r\n                                            if ((posmove[i].y > posmove[target].y) &&\r\n                                                (posmove[target].y > self.node.y) &&\r\n                                                (posmove[target].x == blackc[k].x) &&\r\n                                                (posmove[target].y == blackc[k].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //right\r\n                    if ((posmove[i].y == self.node.y) && (posmove[i].x > self.node.x)) {\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((posmove[i].x == blackc[k].x) && (posmove[i].y == blackc[k].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.x < redc[bipod].x) &&\r\n                                        (redc[bipod].x < blackc[k].x) &&\r\n                                        (redc[bipod].y == self.node.y)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.x < blackc[bipod].x) &&\r\n                                            (blackc[bipod].x < blackc[k].x) &&\r\n                                            (blackc[bipod].y == self.node.y)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = 0; target < posmove.length; target++) {\r\n                                        for (var k = 0; k < blackc.length; k++) {\r\n                                            if ((posmove[i].x > posmove[target].x) &&\r\n                                                (posmove[target].x > self.node.x) &&\r\n                                                (posmove[target].y == blackc[k].y) &&\r\n                                                (posmove[target].x == blackc[k].x)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                }\r\n                // down and left canon shots\r\n                for (var i = posmove.length - 1; i >= 0; i--) {\r\n                    //canonshot\r\n                    //down\r\n                    if ((posmove[i].x == self.node.x) && (posmove[i].y < self.node.y)) {\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((posmove[i].x == blackc[k].x) && (posmove[i].y == blackc[k].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.y > redc[bipod].y) &&\r\n                                        (redc[bipod].y > blackc[k].y) &&\r\n                                        (redc[bipod].x == self.node.x)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.y > blackc[bipod].y) &&\r\n                                            (blackc[bipod].y > blackc[k].y) &&\r\n                                            (blackc[bipod].x == self.node.x)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = posmove.length - 1; target >= 0; target--) {\r\n                                        for (var k = 0; k < blackc.length; k++) {\r\n                                            if ((posmove[i].y < posmove[target].y) &&\r\n                                                (posmove[target].y < self.node.y) &&\r\n                                                (posmove[target].x == blackc[k].x) &&\r\n                                                (posmove[target].y == blackc[k].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    console.log('reach black target');\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //left\r\n                    if ((posmove[i].y == self.node.y) && (posmove[i].x < self.node.x)) {\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((posmove[i].y == blackc[k].y) && (posmove[i].x == blackc[k].x)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.x > redc[bipod].x) &&\r\n                                        (redc[bipod].x > blackc[k].x) &&\r\n                                        (redc[bipod].y == self.node.y)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.x > blackc[bipod].x) &&\r\n                                            (blackc[bipod].x > blackc[k].x) &&\r\n                                            (blackc[bipod].y == self.node.y)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = posmove.length - 1; target >= 0; target--) {\r\n                                        for (var k = 0; k < blackc.length; k++) {\r\n                                            if ((posmove[i].x < posmove[target].x) &&\r\n                                                (posmove[target].x < self.node.x) &&\r\n                                                (posmove[target].y == blackc[k].y) &&\r\n                                                (posmove[target].x == blackc[k].x)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n                \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import {\r\n  receivedchessPosition,\r\n  sendchessPosition,\r\n  senduserID,\r\n  receiveduserID,\r\n  sendroomID,\r\n  receivedroomID,\r\n} from \"../socket_connection\";\r\nimport { createroom } from \"../axios_connection\";\r\n\r\n// const fetch = require('node-fetch')\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {},\r\n  onLoad() {},\r\n  create_room() {\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    receiveduserID().then((data) => {\r\n      var uid = data;\r\n      console.log(\"uid\", uid);\r\n      createroom(uid).then((data) => {\r\n        console.log(data);\r\n        RoomInfos.rid = data;\r\n        console.log(\"roomid\", RoomInfos.rid);\r\n        cc.director.loadScene(\"room\");\r\n      });\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n    \r\n  },\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n\r\n    onLoad () {\r\n        let map = this.map.getComponent('boardinfo');\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        let map = this.map.getComponent('boardinfo');\r\n        this.node.height = map.countblackdead*map.chesssize+100;\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n\r\n    onLoad () {\r\n        let map = this.map.getComponent('boardinfo');\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        let map = this.map.getComponent('boardinfo');\r\n        this.node.height = map.countreddead*map.chesssize+100;\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        roomID:{\r\n            default:null,\r\n            type: cc.Label,\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    deleteroom(){\r\n        let roomID = this.roomID.string;\r\n        if (roomID){\r\n            fetch('https://chinese-chess-vnp.herokuapp.com/api/room/' + roomID, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                // body: JSON.stringify({ id: '1' })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data);\r\n                });\r\n        }\r\n        \r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","\r\nimport { getuserlist, deleteuser } from \"../axios_connection\";\r\n// const fetch = require('node-fetch')\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    deluserID: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n  onLoad() {},\r\n  delete_user() {\r\n    let userID = this.deluserID.string;\r\n    deleteuser(userID);\r\n  },\r\n\r\n  start() {\r\n    getuserlist();\r\n  },\r\n\r\n  // update (dt) {},\r\n});\r\n","import { senduserID, receiveduserID } from \"../socket_connection\";\r\nimport { getUserbyID } from \"../axios_connection\";\r\n// const fetch = require('node-fetch')\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    namedisplay: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n  onLoad() {\r\n    var uid = 0;\r\n    receiveduserID()\r\n      .then((data) => {\r\n        uid = data;\r\n        let name = this.namedisplay;\r\n        getUserbyID(uid).then((data) => {\r\n          name.string = data.data.Username + \" #\" + uid;\r\n        });\r\n      })\r\n      .catch(function () {\r\n        console.log(\"Promise Rejected\");\r\n      });\r\n  },\r\n  start() {},\r\n  onDisable() {},\r\n  // update (dt) {},\r\n});\r\n","const receiveduserlist = () => {\r\n  fetch(\"https://chinese-chess-vnp.herokuapp.com/api/player\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data;\r\n    });\r\n};\r\n// export{ sendUsername, receiveduserlist};\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if ((posmove[i].x >= map.blackcastleleftbound) && (posmove[i].x <= map.blackcastlerightbound) &&\r\n                        (posmove[i].y >= map.blackcastledownbound) && (posmove[i].y <= map.blackcastleupbound)) {\r\n                        //upright\r\n                        if (((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y + map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //upleft\r\n                        if (((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y + map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //downright\r\n                        if (((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y - map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //downleft\r\n                        if (((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y - map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //block other chess\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if ((posmove[i].x >= map.redcastleleftbound) && (posmove[i].x <= map.redcastlerightbound) &&\r\n                        (posmove[i].y >= map.redcastledownbound) && (posmove[i].y <= map.redcastleupbound)) {\r\n                        //upright\r\n                        if (((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y + map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //upleft\r\n                        if (((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y + map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //downright\r\n                        if (((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y - map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //downleft\r\n                        if (((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y - map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n                \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","const { io } = require(\"socket.io-client\");\r\nimport {\r\n  getroombyID,\r\n  joinroombyIDasp1,\r\n  joinroombyIDasp2,\r\n} from \"../axios_connection\";\r\n// const fetch = require('node-fetch')\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    roomID: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    Pass: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n\r\n  onLoad() {},\r\n  join_room() {\r\n    let PlayerInfo = cc.director\r\n      .getScene()\r\n      .getChildByName(\"PlayerInfo\")\r\n      .getComponent(\"PlayerInfo\");\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    let uid = PlayerInfo.uid;\r\n    let roomID = this.roomID.string;\r\n    let pass = this.Pass.string;\r\n\r\n    getroombyID(roomID).then((data) => {\r\n      if (data.data.id == roomID) {\r\n        if (data.data.Player1 == null) {\r\n          joinroombyIDasp1(roomID, uid).then((data) => {\r\n            console.log(data);\r\n            RoomInfos.rid = roomID;\r\n            cc.director.loadScene(\"room\");\r\n          });\r\n        } else if (data.data.Player2 == null) {\r\n          joinroombyIDasp2(roomID, uid).then((data) => {\r\n            console.log(data);\r\n            RoomInfos.rid = roomID;\r\n            cc.director.loadScene(\"room\");\r\n          });\r\n        } else {\r\n          console.log(\"Roomfull!\");\r\n        }\r\n      }\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","(function () {\n  let _global = globalThis || window;\n  _global.sdkhub = _global.sdkhub || {};\n  let PluginType = {\n    kPluginCustom: 1,\n    kPluginUser: 2,\n    kPluginFee: 4,\n    kPluginAds: 8,\n    kPluginPush: 16,\n  };\n\n  let CustomResultCode = {\n    kCustomExtension: 10000\n  };\n\n  let UserResultCode = {\n    kInitSucceed: 0,\n    kInitFailed: 1,\n    kLoginSucceed: 2,\n    kLoginNetworkError: 3,\n    kLoginNoNeed: 4,\n    kLoginFailed: 5,\n    kLoginCancel: 6,\n    kLogoutSucceed: 7,\n    kLogoutFailed: 8,\n    kPlatformEnter: 9,\n    kPlatformBack: 10,\n    kPausePage: 11,\n    kExitPage: 12,\n    kAntiAddictionQuery: 13,\n    kRealNameRegister: 14,\n    kAccountSwitchSucceed: 15,\n    kAccountSwitchFailed: 16,\n    kOpenShop: 17,\n    kAccountSwitchCancel: 18,\n    kGameExitPage: 19,\n    kScoreSubmitSucceed: 20,\n    kScoreSubmitFailed: 21,\n    kAchUnlockSucceed: 22,\n    kAchUnlockFailed: 23,\n    kShowLeaderBoardSucceed: 24,\n    kShowLeaderBoardFailed: 25,\n    kShowAchievementSucceed: 26,\n    kShowAchievementFailed: 27,\n    kServerVerify: 28,\n    kUserExtension: 20000\n  };\n\n  let ToolBarPlace = {\n    kToolBarTopLeft: 1,\n    kToolBarTopRight: 2,\n    kToolBarMidLeft: 3,\n    kToolBarMidRight: 4,\n    kToolBarBottomLeft: 5,\n    kToolBarBottomRight: 6\n  };\n\n  let FeeResultCode = {\n    kFeeSucceed: 0,\n    kFeeFailed: 1,\n    kFeeCancel: 2,\n    kFeeNetworkError: 3,\n    kFeeProductionInforIncomplete: 4,\n    kFeeInitSucceed: 5,\n    kFeeInitFailed: 6,\n    kFeeNowPaying: 7,\n    kFeeRechargeSucceed: 8,\n    kFeeExtension: 30000,\n  };\n\n  let AdsResultCode = {\n    kAdsReceived: 0,\n    kAdsShown: 1,\n    kAdsDismissed: 2,\n    kPointsSpendSucceed: 3,\n    kPointsSpendFailed: 4,\n    kNetworkError: 5,\n    kUnknownError: 6,\n    kOfferWallOnPointsChanged: 7,\n    kRewardedVideoWithReward: 8,\n    kFeeFinished: 9,\n    kAdsClicked: 10,\n    kAdsFailed: 11,\n    kAdsPreloadFailed: 12,\n    kAdsShownFailed: 13,\n    kAdsRetryPreload: 14,\n    kAdsOnLeave: 15,\n    kAdsOnAdImpression: 16,\n    kAdsExtension: 40000\n  };\n\n  let AdsPos = {\n    kPosBottom: 0,\n    kPosCenter: 1,\n    kPosTop: 2,\n  };\n\n  let PushResultCode = {\n    kPushReceiveMessage: 0,\n    kStartPushSucceed: 1,\n    kStartPushFailed: 2,\n    kClosePushSucceed: 3,\n    kClosePushFailed: 4,\n    kSetAliasSucceed: 5,\n    kSetAliasFailed: 6,\n    kDelAliasSucceed: 7,\n    kDelAliasFailed: 8,\n    kSetTagsSucceed: 9,\n    kSetTagsFailed: 10,\n    kDelTagSucceed: 11,\n    kDelTagsFailed: 12,\n    kPushExtension: 50000\n  };\n\n  sdkhub.PluginType = PluginType;\n  sdkhub.CustomResultCode = CustomResultCode;\n  sdkhub.UserResultCode = UserResultCode;\n  sdkhub.ToolBarPlace = ToolBarPlace;\n  sdkhub.FeeResultCode = FeeResultCode;\n  sdkhub.AdsResultCode = AdsResultCode;\n  sdkhub.AdsPos = AdsPos;\n  sdkhub.PushResultCode = PushResultCode;\n  sdkhub.getCustomPlugins = () => [];\n  sdkhub.getUserPlugins = () => [];\n  sdkhub.getFeePlugins = () => [];\n  sdkhub.getCustomPlugin = (pluginId = '') => null;\n  sdkhub.getUserPlugin = (pluginId = '') => null;\n  sdkhub.getFeePlugin = (pluginId = '') => null;\n  sdkhub.getAdsPlugin = () => null;\n  sdkhub.getPushPlugin = () => null;\n  sdkhub.getFrameworkVersion = () => \"\";\n  sdkhub.getPluginMethods = (plugin) => \"\";\n  sdkhub.getSupportPluginIds = () => \"\";\n  sdkhub.getChannelId = () => \"\";\n  if (typeof SDKHub === 'undefined') return;\n  sdkhub.getCustomPlugins = () => SDKHub.AgentManager.getInstance().getCustomPlugins();\n  sdkhub.getUserPlugins = () => SDKHub.AgentManager.getInstance().getUserPlugins();\n  sdkhub.getFeePlugins = () => SDKHub.AgentManager.getInstance().getFeePlugins();\n  sdkhub.getCustomPlugin = (pluginId = '') => SDKHub.AgentManager.getInstance().getCustomPlugin(pluginId || \"\");\n  sdkhub.getUserPlugin = (pluginId = '') => SDKHub.AgentManager.getInstance().getUserPlugin(pluginId || \"\");\n  sdkhub.getFeePlugin = (pluginId = '') => SDKHub.AgentManager.getInstance().getFeePlugin(pluginId || \"\");\n  sdkhub.getAdsPlugin = () => SDKHub.AgentManager.getInstance().getAdsPlugin();\n  sdkhub.getPushPlugin = () => SDKHub.AgentManager.getInstance().getPushPlugin();\n  sdkhub.getFrameworkVersion = () => SDKHub.AgentManager.getInstance().getFrameworkVersion();\n  sdkhub.getPluginMethods = (plugin) => SDKHub.AgentManager.getInstance().getPluginMethods(plugin);\n  sdkhub.getSupportPluginIds = () => SDKHub.AgentManager.getInstance().getSupportPluginIds();\n  sdkhub.getChannelId = () => SDKHub.AgentManager.getInstance().getChannelId();\n})();","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if ((posmove[i].x >= map.blackcastleleftbound) && (posmove[i].x <= map.blackcastlerightbound) &&\r\n                        (posmove[i].y >= map.blackcastledownbound) && (posmove[i].y <= map.blackcastleupbound)) {\r\n                        //right\r\n                        if ((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //left\r\n                        if ((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //up\r\n                        if ((posmove[i].x == this.node.x) && (posmove[i].y == this.node.y + map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //down\r\n                        if ((posmove[i].x == this.node.x) && (posmove[i].y == this.node.y - map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if ((posmove[i].x >= map.redcastleleftbound) && (posmove[i].x <= map.redcastlerightbound) &&\r\n                        (posmove[i].y >= map.redcastledownbound) && (posmove[i].y <= map.redcastleupbound)) {\r\n                        //right\r\n                        if ((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //left\r\n                        if ((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //up\r\n                        if ((posmove[i].x == this.node.x) && (posmove[i].y == this.node.y + map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //down\r\n                        if ((posmove[i].x == this.node.x) && (posmove[i].y == this.node.y - map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //move1\r\n                    if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y + map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move2\r\n                    if ((posmove[i].x == self.node.x + map.s * 2) && (posmove[i].y == self.node.y + map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move3\r\n                    if ((posmove[i].x == self.node.x + map.s * 2) && (posmove[i].y == self.node.y - map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move4\r\n                    if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y - map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move5\r\n                    if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y - map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move6\r\n                    if ((posmove[i].x == self.node.x - map.s * 2) && (posmove[i].y == self.node.y - map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move7\r\n                    if ((posmove[i].x == self.node.x - map.s * 2) && (posmove[i].y == self.node.y + map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move8\r\n                    if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y + map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //move1\r\n                    if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y + map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move2\r\n                    if ((posmove[i].x == self.node.x + map.s * 2) && (posmove[i].y == self.node.y + map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move3\r\n                    if ((posmove[i].x == self.node.x + map.s * 2) && (posmove[i].y == self.node.y - map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move4\r\n                    if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y - map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move5\r\n                    if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y - map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move6\r\n                    if ((posmove[i].x == self.node.x - map.s * 2) && (posmove[i].y == self.node.y - map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move7\r\n                    if ((posmove[i].x == self.node.x - map.s * 2) && (posmove[i].y == self.node.y + map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move8\r\n                    if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y + map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        movecodecontent:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n    onLoad () {\r\n        // let movecodelist = this.movecodelist.getComponent('movecodelist');\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        // let movecodecontent = this.movecodecontent.getComponent('movecodelist');\r\n        // this.node.height = movecodecontent.list.length*40+100;\r\n    },\r\n});\r\n","\r\nimport {\r\n  receivedchessPosition,\r\n  sendchessPosition,\r\n  senddeadchess,\r\n  receiveddeadchess,\r\n} from \"../socket_connection\";\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    list: {\r\n      default: \"\",\r\n      multiline: true,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    movecodelist: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n\r\n  updatelist() {\r\n    // let socket = io.connect(\"http://localhost:3000\", { transports : ['websocket'] });\r\n  },\r\n\r\n  // })\r\n  start() {},\r\n  update(dt) {},\r\n});\r\n","cc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {},\r\n  onLoad() {},\r\n  load_scene() {\r\n    cc.director.loadScene(\"board\");\r\n  },\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","\t\r\n// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n \r\ncc.Class({\r\n    extends: cc.Component,\r\n \r\n    properties: {\r\n \r\n    },\r\n \r\n    onLoad () {},\r\n    load_scene(){\r\n        cc.director.loadScene(\"cotuong\");\r\n    },\r\n    start () {\r\n \r\n    },\r\n \r\n    // update (dt) {},\r\n});\r\n ","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad () {},\r\n    load_scene(){\r\n        cc.director.loadScene(\"homepage\");\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad () {},\r\n    load_scene(){\r\n        cc.director.loadScene(\"daucuocvangrooms\");\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import { receiveduserID } from \"../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {},\r\n  onLoad() {},\r\n  create_room() {},\r\n  load_scene() {\r\n    cc.director.loadScene(\"rooms\");\r\n  },\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (this.node.y > map.redriver) {\r\n                        //downward\r\n                        if ((posmove[i].x == self.node.x) && (posmove[i].y == self.node.y - map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    else if (this.node.y <= map.redriver) {\r\n                        //downward\r\n                        if ((posmove[i].x == self.node.x) && (posmove[i].y == self.node.y - map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //left\r\n                        if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //right\r\n                        if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (this.node.y < map.blackriver) {\r\n                        //foward\r\n                        if ((posmove[i].x == self.node.x) && (posmove[i].y == self.node.y + map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    else if (self.node.y >= map.blackriver) {\r\n                        //foward\r\n                        if ((posmove[i].x == self.node.x) && (posmove[i].y == self.node.y + map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //left\r\n                        if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //right\r\n                        if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        p1button:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        p2button:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n\r\n    onLoad () {},\r\n\r\n    start () {\r\n        \r\n    },\r\n\r\n    update (dt) {\r\n\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    onload(){\r\n\r\n        \r\n\r\n    },\r\n\r\n    start () {\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //vertical\r\n                    if (posmove[i].x == this.node.x) {\r\n                        posmove[i].active = true;\r\n                        //verticalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].x == (self.node.x) && (redc[j].y != (self.node.y))) {\r\n                                if (((posmove[i].y > self.node.y) && (posmove[i].y > redc[j].y) && (redc[j].y > self.node.y))\r\n                                    || ((posmove[i].y < self.node.y) && (posmove[i].y < redc[j].y) && (redc[j].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].x == (self.node.x) && (blackc[k].y != (self.node.y))) {\r\n                                if (((posmove[i].y > self.node.y) && (posmove[i].y > blackc[k].y) && (blackc[k].y > self.node.y))\r\n                                    || ((posmove[i].y < self.node.y) && (posmove[i].y < blackc[k].y) && (blackc[k].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //horizontal\r\n                    if ((posmove[i].y == this.node.y)) {\r\n                        posmove[i].active = true;\r\n                        //horizontalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].y == (self.node.y) && (redc[j].x != (self.node.x))) {\r\n                                if (((posmove[i].x > self.node.x) && (posmove[i].x > redc[j].x) && (redc[j].x > self.node.x))\r\n                                    || ((posmove[i].x < self.node.x) && (posmove[i].x < redc[j].x) && (redc[j].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].y == (self.node.y) && (blackc[k].x != (self.node.x))) {\r\n                                if (((posmove[i].x > self.node.x) && (posmove[i].x > blackc[k].x) && (blackc[k].x > self.node.x))\r\n                                    || ((posmove[i].x < self.node.x) && (posmove[i].x < blackc[k].x) && (blackc[k].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //vertical\r\n                    if (posmove[i].x == this.node.x) {\r\n                        posmove[i].active = true;\r\n                        //verticalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].x == (self.node.x) && (redc[j].y != (self.node.y))) {\r\n                                if (((posmove[i].y > self.node.y) && (posmove[i].y > redc[j].y) && (redc[j].y > self.node.y))\r\n                                    || ((posmove[i].y < self.node.y) && (posmove[i].y < redc[j].y) && (redc[j].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].x == (self.node.x) && (blackc[k].y != (self.node.y))) {\r\n                                if (((posmove[i].y > self.node.y) && (posmove[i].y > blackc[k].y) && (blackc[k].y > self.node.y))\r\n                                    || ((posmove[i].y < self.node.y) && (posmove[i].y < blackc[k].y) && (blackc[k].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //horizontal\r\n                    if ((posmove[i].y == this.node.y)) {\r\n                        posmove[i].active = true;\r\n                        //horizontalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].y == (self.node.y) && (redc[j].x != (self.node.x))) {\r\n                                if (((posmove[i].x > self.node.x) && (posmove[i].x > redc[j].x) && (redc[j].x > self.node.x))\r\n                                    || ((posmove[i].x < self.node.x) && (posmove[i].x < redc[j].x) && (redc[j].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].y == (self.node.y) && (blackc[k].x != (self.node.x))) {\r\n                                if (((posmove[i].x > self.node.x) && (posmove[i].x > blackc[k].x) && (blackc[k].x > self.node.x))\r\n                                    || ((posmove[i].x < self.node.x) && (posmove[i].x < blackc[k].x) && (blackc[k].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import { receivedroomID, sendroomID } from \"../../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    Info: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    Player1: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    Player2: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n  onLoad() {\r\n    let info = this.Info;\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    var rid = RoomInfos.rid;\r\n    info.string = \"Room no \" + rid;\r\n  },\r\n  start() {},\r\n\r\n  update(dt) {\r\n    // let p1 = this.Player1;\r\n    // let p2 = this.Player2;\r\n    // let RoomInfos = cc.director\r\n    //   .getScene()\r\n    //   .getChildByName(\"RoomInfos\")\r\n    //   .getComponent(\"RoomInfos\");\r\n    // var rid = RoomInfos.rid;\r\n    // fetch(\"https://chinese-chess-vnp.herokuapp.com/api/room/\" + rid, {\r\n    //   method: \"GET\",\r\n    //   headers: {\r\n    //     Accept: \"application/json\",\r\n    //     \"Content-Type\": \"application/json\",\r\n    //   },\r\n    // })\r\n    //   .then((response) => response.json())\r\n    //   .then((data) => {\r\n    //     if (data.data.Player1) {\r\n    //       p1.string = \"P1: Ready\";\r\n    //     } else {\r\n    //       p1.string = \"P1: Waiting...\";\r\n    //     }\r\n    //     if (data.data.Player2) {\r\n    //       p2.string = \"P1: Ready\";\r\n    //     } else {\r\n    //       p2.string = \"P1: Waiting...\";\r\n    //     }\r\n    //   });\r\n  },\r\n});\r\n","import { receiveduserID } from \"../socket_connection\";\r\nimport { getUserbyID, getroomlist } from \"../axios_connection\";\r\n// const fetch = require('node-fetch')\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {\r\n    listrooms: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    id: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n  onLoad() {\r\n    let id = this.id;\r\n    receiveduserID().then((data) => {\r\n      let uid = data;\r\n      let name = this.namedisplay;\r\n      getUserbyID(uid).then((data) => {\r\n        id.string = data.data.Username + \" #\" + uid;\r\n      }).catch(function () {\r\n        console.log(\"Promise Rejected\");\r\n      });\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  show_rooms() {\r\n    let listrooms = this.listrooms;\r\n    let roomlist = [];\r\n    getroomlist().then((data) => {\r\n      for (var i = 0; i < data.data.length; i++) {\r\n        if (data.data[i].Player1 != null && data.data[i].Player2 != null) {\r\n          roomlist +=\r\n            JSON.stringify(\"Room no \" + data.data[i].id + \" --- full\") + \"\\n\";\r\n        } else if (\r\n          data.data[i].Player1 != null &&\r\n          data.data[i].Player2 == null\r\n        ) {\r\n          roomlist +=\r\n            JSON.stringify(\"Room no \" + data.data[i].id + \" --- 1/2\") + \"\\n\";\r\n        } else if (\r\n          data.data[i].Player1 == null &&\r\n          data.data[i].Player2 != null\r\n        ) {\r\n          roomlist +=\r\n            JSON.stringify(\"Room no \" + data.data[i].id + \" --- 1/2\") + \"\\n\";\r\n        } else if (\r\n          data.data[i].Player1 == null &&\r\n          data.data[i].Player2 == null\r\n        ) {\r\n          roomlist +=\r\n            JSON.stringify(\"Room no \" + data.data[i].id + \" --- 0/2\") + \"\\n\";\r\n        }\r\n      }\r\n      listrooms.string = roomlist;\r\n    })\r\n    .catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  start() {},\r\n  update(dt) {},\r\n});\r\n","import * as io from \"socket.io-client\";\r\nconst socket = io.connect(\"http://192.168.1.31:3000\", {\r\n  reconnectionDelayMax: 10000,\r\n  query: {\r\n    userId: 10,\r\n  },\r\n});\r\n\r\nconst senduserID = (data) => {\r\n  socket.emit(\"senduserID\", data);\r\n};\r\n\r\nconst receiveduserID = () => {\r\n  return new Promise((resolve, reject) => {\r\n    socket.on(\"receiveduserID\", (data) => {\r\n      var userID = data;\r\n      resolve(userID);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\n\r\nconst sendroomID = (data) => {\r\n  socket.emit(\"sendroomID\", data);\r\n};\r\n\r\nconst receivedroomID = () => {  \r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"returnnew Promise run\");\r\n    socket.on(\"receivedroomID\", (data) => {\r\n      console.log(\"receivedrooomID() run\");\r\n      resolve(data);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\n\r\n//chess moves field\r\nconst chess = [];\r\nconst sendchessPosition = (data) => {\r\n  socket.timeout(500).emit(\"sendChessPosition\", data);\r\n};\r\nconst receivedchessPosition = function () {\r\n  return new Promise((resolve, reject) => {\r\n    socket.once(\"receivedChessPosition\", (data) => {\r\n      chess.push(data[data.length - 1]);\r\n      resolve(chess);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\n\r\nconst senddeadchess = (data) => {\r\n  socket.emit(\"senddeadchess\", data);\r\n};\r\n\r\nconst receiveddeadchess = function () {\r\n  return new Promise((resolve, reject) => {\r\n    socket.once(\"receiveddeadchess\", (data) => {\r\n      resolve(data);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\n\r\nconst sendstate = (data) => {\r\n  socket.emit(\"sendstate\", data);\r\n};\r\nconst receivedstate = function () {\r\n  return new Promise((resolve, reject) => {\r\n    socket.once(\"receivedstate\", (data) => {\r\n      resolve(data);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\nconst sendName = (userId) => {\r\n  const socket = getSocket(userId);\r\n  socket.emit(\"name\", { name: \"teo\" });\r\n};\r\n\r\nexport {\r\n  sendName,\r\n  senduserID,\r\n  receiveduserID,\r\n  sendchessPosition,\r\n  receivedchessPosition,\r\n  senddeadchess,\r\n  receiveddeadchess,\r\n  sendroomID,\r\n  receivedroomID,\r\n  sendstate,\r\n  receivedstate,\r\n};\r\n","// let socket = io(\"http://localhost:3000\", {transports : ['websocket'],\r\n//     query: {\r\n//       userId: 1,\r\n//       cc:\"cc\",\r\n//     },\r\n//   });\r\n\r\nimport {\r\n  receivedchessPosition,\r\n  sendchessPosition,\r\n  senddeadchess,\r\n  receiveddeadchess,\r\n  sendstate,\r\n} from \"../socket_connection\";\r\n\r\n// const { io } = require(\"socket.io-client\");\r\n// import * as io from \"socket.io-client\";\r\n// let socket = io.connect('http://localhost:3000/');\r\n//\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {\r\n    place: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    redchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    blackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadredchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadblackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    movecodelist: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    updateall: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    // socket: io.connect(\"http://localhost:3000\", { transports : ['websocket'] }),\r\n  },\r\n  redtouchmove(i) {\r\n    let updateall = this.updateall.getComponent(\"update\");\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadblackchess = this.deadblackchess;\r\n    var place = this.place;\r\n    var posmove = place.getChildren();\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    redc.parent = place;\r\n    blackc.parent = place;\r\n\r\n    if (posmove[i].active == true) {\r\n      posmove[i].on(\r\n        \"touchstart\",\r\n        function () {\r\n          if (self.node.isChildOf(redchess)) {\r\n            var kill = 0;\r\n            for (var k = 0; k < blackc.length; k++) {\r\n              if (blackc[k].x == this.x && blackc[k].y == this.y) {\r\n                senddeadchess({\r\n                  name: blackc[k].name,\r\n                });\r\n                kill++;\r\n                map.movecode.push({\r\n                  name: self.node.name,\r\n                  xed: self.node.x,\r\n                  yed: self.node.y,\r\n                  x: this.x,\r\n                  y: this.y,\r\n                });\r\n                console.table(map.movecode);\r\n                sendchessPosition(map.movecode);\r\n                // console.log(self.node.name, this.x, this.y);\r\n                // const data = receivedchessPosition();\r\n                // console.log(data);\r\n\r\n                this.setScale(1, 1);\r\n                this.off(\"touchstart\", this.function, posmove[i]);\r\n                break;\r\n              }\r\n            }\r\n            if (kill == 0) {\r\n              map.movecode.push({\r\n                name: self.node.name,\r\n                xed: self.node.x,\r\n                yed: self.node.y,\r\n                x: this.x,\r\n                y: this.y,\r\n              });\r\n              console.table(map.movecode);\r\n              sendchessPosition(map.movecode);\r\n              this.setScale(1, 1);\r\n              this.off(\"touchstart\", this.function, posmove[i]);\r\n            }\r\n          }\r\n          for (var reset = 0; reset < posmove.length; reset++) {\r\n            posmove[reset].setScale(1, 1);\r\n            posmove[reset].active = false;\r\n          }\r\n          //blackturn\r\n          blackchess.pauseSystemEvents(true);\r\n          // console.log(blackchess.pauseSystemEvents);\r\n          redchess.pauseSystemEvents(true);\r\n          sendstate(\"red\");\r\n          updateall.updateall();\r\n          // updateall.updateall(self.node.name, self.node.x, self.node.y);\r\n        },\r\n        posmove[i]\r\n      );\r\n    }\r\n  },\r\n  blacktouchmove(i) {\r\n    let updateall = this.updateall.getComponent(\"update\");\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadredchess = this.deadredchess;\r\n    var place = this.place;\r\n    var posmove = place.getChildren();\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    redc.parent = place;\r\n    blackc.parent = place;\r\n    if (posmove[i].active == true) {\r\n      posmove[i].on(\r\n        \"touchstart\",\r\n        function () {\r\n          if (self.node.isChildOf(blackchess)) {\r\n            var kill = 0;\r\n            for (var j = 0; j < redc.length; j++) {\r\n              if (redc[j].x == this.x && redc[j].y == this.y) {\r\n                senddeadchess({\r\n                  name: redc[j].name,\r\n                });\r\n\r\n                kill++;\r\n                map.movecode.push({\r\n                  name: self.node.name,\r\n                  xed: self.node.x,\r\n                  yed: self.node.y,\r\n                  x: this.x,\r\n                  y: this.y,\r\n                });\r\n                console.table(map.movecode);\r\n                sendchessPosition(map.movecode);\r\n                this.setScale(1, 1);\r\n                this.off(\"touchstart\", this.function, posmove[i]);\r\n                break;\r\n              }\r\n            }\r\n            if (kill == 0) {\r\n              map.movecode.push({\r\n                name: self.node.name,\r\n                xed: self.node.x,\r\n                yed: self.node.y,\r\n                x: this.x,\r\n                y: this.y,\r\n              });\r\n              console.table(map.movecode);\r\n              sendchessPosition(map.movecode);\r\n              this.setScale(1, 1);\r\n              this.off(\"touchstart\", this.function, posmove[i]);\r\n            }\r\n          }\r\n          for (var reset = 0; reset < posmove.length; reset++) {\r\n            posmove[reset].setScale(1, 1);\r\n            posmove[reset].active = false;\r\n          }\r\n          //redturn\r\n          // newposition(self.node.name, self.node.x, self.node.y);\r\n          redchess.pauseSystemEvents(true);\r\n          blackchess.pauseSystemEvents(true);\r\n          // movecodelist.updatelist();\r\n          updateall.updateall();\r\n          // updateall.updateall(self.node.name, self.node.x, self.node.y);\r\n        },\r\n        posmove[i]\r\n      );\r\n    }\r\n  },\r\n  // newposition(name, x, y){\r\n  //     return 'name', x, y;\r\n  // },\r\n  start() {},\r\n  onLoad() {},\r\n  update(dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n// import * as io from \"socket.io-client\";\r\n// let socket = io.connect('http://localhost:3000/');\\\r\nimport {\r\n  receivedchessPosition,\r\n  receiveddeadchess,\r\n  sendchessPosition,\r\n} from \"../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    movecodelist: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    place: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    redchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    blackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadredchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadblackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    movelist: [],\r\n  },\r\n\r\n  onLoad() {},\r\n  updateall() {\r\n    // let map = this.map.getComponent(\"boardinfo\");\r\n    // list += JSON.stringify(map.movecode[map.movecode.length - 1]) + \"\\n\";\r\n  },\r\n  start() {},\r\n  update(dt = 10000) {\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadredchess = this.deadredchess;\r\n    let deadblackchess = this.deadblackchess;\r\n    var movecodelist = this.movecodelist;\r\n\r\n    receivedchessPosition().then((data) => {\r\n      for (var j = 0; j < redc.length; j++) {\r\n        if (redc[j].name == data[data.length - 1].name) {\r\n          redc[j].x = data[data.length - 1].x;\r\n          redc[j].y = data[data.length - 1].y;\r\n          redchess.pauseSystemEvents(true);\r\n          blackchess.resumeSystemEvents(true);\r\n          break;\r\n        }\r\n      }\r\n      for (var k = 0; k < blackc.length; k++) {\r\n        if (blackc[k].name == data[data.length - 1].name) {\r\n          blackc[k].x = data[data.length - 1].x;\r\n          blackc[k].y = data[data.length - 1].y;\r\n          blackchess.pauseSystemEvents(true);\r\n          redchess.resumeSystemEvents(true);\r\n          break;\r\n        }\r\n      }\r\n      if (  \r\n        this.movelist.length == 0 ||\r\n        this.movelist[this.movelist.length - 1] !==\r\n          JSON.stringify(data[data.length - 1])\r\n      ) {\r\n        this.movelist.push(JSON.stringify(data[data.length - 1]));\r\n      }\r\n      movecodelist.string = this.movelist;\r\n    })\r\n    .catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n    receiveddeadchess().then((data) => {\r\n      for (var j = 0; j < redc.length; j++) {\r\n        if (redc[j].name == data.name) {\r\n          map.countreddead++;\r\n          redc[j].setScale(0.8, 0.8);\r\n          redc[j].x = 0;\r\n          redc[j].y = -30 - map.countreddead * (map.chesssize / 2);\r\n          redc[j].pauseSystemEvents(true);\r\n          redc[j].parent = deadredchess;\r\n        }\r\n      }\r\n      for (var k = 0; k < blackc.length; k++) {\r\n        if (blackc[k].name == data.name) {\r\n          map.countblackdead++;\r\n          blackc[k].setScale(0.8, 0.8);\r\n          blackc[k].x = 0;\r\n          blackc[k].y = -30 - map.countblackdead * (map.chesssize / 2);\r\n          blackc[k].pauseSystemEvents(true);\r\n          blackc[k].parent = deadblackchess;\r\n        }\r\n      }\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n});\r\n"],"file":"index.js"}