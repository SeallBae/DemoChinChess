{"version":3,"sources":["assets/script/Blur.js","assets/script/Page/Login/LoginPage.js","assets/script/PlayerInfo.js","assets/script/Playnow.js","assets/script/Popup.js","assets/script/room/RoomInfos.js","assets/script/room/PrepareRoom/Sendchat.js","assets/script/room/PrepareRoom/Showchat.js","assets/script/Touch.js","assets/script/axios_connection.js","assets/script/changescene/backtoroomlist.js","assets/script/board/chess/blackchess/bishopblack.js","assets/script/board/chess/redchess/bishopred.js","assets/script/board/boardinfo.js","assets/script/board/chess/blackchess/canonblack.js","assets/script/board/chess/redchess/canonred.js","assets/script/room/createroom.js","assets/script/gameplay/deadblackchess.js","assets/script/gameplay/deadredchess.js","assets/script/temp/deleteroom.js","assets/script/temp/deleteuser.js","assets/script/homepage/display.js","assets/script/fetch.js","assets/script/board/chess/blackchess/guardblack.js","assets/script/board/chess/redchess/guardred.js","assets/script/room/joinroom.js","assets/script/board/chess/blackchess/kingblack.js","assets/script/board/chess/redchess/kingred.js","assets/script/board/chess/blackchess/knightblack.js","assets/script/board/chess/redchess/knightred.js","assets/script/gameplay/list.js","assets/script/gameplay/movecodelist.js","assets/script/changescene/movetoboard.js","assets/script/changescene/movetohomepage.js","assets/script/changescene/movetorooms.js","assets/script/changescene/movetoroom.js","assets/script/board/chess/blackchess/pawnblack.js","assets/script/board/chess/redchess/pawnred.js","assets/script/gameplay/readybutton.js","assets/script/board/chess/redchess/redchess.js","assets/script/board/chess/blackchess/rookblack.js","assets/script/board/chess/redchess/rookred.js","assets/script/room/PrepareRoom/roominfo.js","assets/script/room/showrooms.js","assets/script/socket_connection.js","assets/script/board/touchmove.js","assets/script/board/update.js"],"names":["cc","Class","extends","Component","properties","onLoad","blur","this","node","opacity","pauseSystemEvents","unblur","resumeSystemEvents","start","username","default","type","Node","_socket_connection","require","uid","uname","game","addPersistRootNode","update","dt","senduserID","_axios_connection","Username","Label","PlayerInfo","onEnable","onload","load_scene","getComponent","name","string","createUser","then","data","id","director","loadScene","console","log","show","active","scale","tween","to","easing","showcover","hide","_this","call","rid","onDisable","sendroomID","chat","chatholder","emitchat","socket","io","connect","transports","emit","on","showchat","pointTouch","_regeneratorRuntime","axios","urlroom","urlplayer","getuserlist","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","method","url","response","stop","apply","arguments","deleteuser","_ref2","_callee2","_callee2$","_context2","_x","_ref3","_callee3","_callee3$","_context3","abrupt","Promise","resolve","reject","error","_x2","getUserbyID","_ref4","_callee4","_callee4$","_context4","_x3","getroomlist","_ref5","_callee5","_callee5$","_context5","createroom","_ref6","_callee6","_callee6$","_context6","Player1","_x4","getroombyID","_ref7","_callee7","_callee7$","_context7","_x5","joinroombyIDasp1","_ref8","_callee8","_callee8$","_context8","_x6","_x7","joinroombyIDasp2","_ref9","_callee9","_callee9$","_context9","Player2","_x8","_x9","quitfullroombyIDasp1","_ref10","_callee10","_callee10$","_context10","_x10","_x11","quitfullroombyIDasp2","_ref11","_callee11","_callee11$","_context11","_x12","quitroombyIDasp1","_ref12","_callee12","_callee12$","_context12","_x13","quitroombyIDasp2","_ref13","_callee13","_callee13$","_context13","_x14","backtoroomlist","getScene","getChildByName","RoomInfos","roomID","p2","place","redchess","blackchess","map","showpossiblemove","touchmove","posmove","getChildren","redc","blackc","parent","self","i","length","y","blackriver","x","s","j","k","setScale","blacktouchmove","receivedroomID","fetch","headers","Accept","Content-Type","json","receiveduserID","redriver","redtouchmove","movecode","countblackdead","countreddead","redcastleupbound","redcastledownbound","redcastleleftbound","redcastlerightbound","blackcastleupbound","blackcastledownbound","blackcastleleftbound","blackcastlerightbound","chesssize","test","bipod","target","create_room","height","deleteroom","deluserID","delete_user","userID","namedisplay","receiveduserlist","_require","Pass","join_room","pass","movecodecontent","list","multiline","movecodelist","updatelist","p1button","p2button","Info","info","listrooms","show_rooms","roomlist","JSON","stringify","_interopRequireWildcard","reconnectionDelayMax","query","userId","chess","sendchessPosition","timeout","receivedchessPosition","once","push","senddeadchess","receiveddeadchess","sendstate","receivedstate","sendName","getSocket","deadredchess","deadblackchess","updateall","isChildOf","kill","xed","yed","table","off","reset","movelist"],"mappings":"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","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad () {},\r\n    blur(){\r\n        \r\n        this.node.opacity = 160;\r\n        this.node.pauseSystemEvents(true);\r\n    },\r\n    unblur(){\r\n        this.node.opacity = 255;\r\n        this.node.resumeSystemEvents(true);\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        username:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n    \r\n    onLoad () {},\r\n\r\n    start () {\r\n        \r\n        \r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { senduserID } from \"./socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    uid: 0,\r\n    uname: \"\",\r\n  },\r\n\r\n  onLoad() {\r\n    cc.game.addPersistRootNode(this.node);\r\n    let uid = this.uid;\r\n    let uname = this.uname;\r\n  },\r\n\r\n  start() {},\r\n\r\n  update(dt = 1000) {\r\n    senduserID(this.uid);\r\n    cc.game.addPersistRootNode(this.node);\r\n  },\r\n});\r\n","import { senduserID } from \"./socket_connection\"\r\nimport { createUser } from \"./axios_connection\";\r\n// const fetch = require('node-fetch')\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {\r\n    Username: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    PlayerInfo: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n  },\r\n  onEnable() {},\r\n  onload() {},\r\n  start() {},\r\n  load_scene() {\r\n    \r\n    var PlayerInfo = this.PlayerInfo.getComponent(\"PlayerInfo\");\r\n    let name = this.Username.string;\r\n    createUser(name)\r\n    .then((data)=>{\r\n      PlayerInfo.uname = data.data.Username;\r\n      PlayerInfo.uid = data.data.id;\r\n      cc.director.loadScene(\"homepage\")\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  update(dt) {},\r\n});\r\n\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n  \r\n    },\r\n    show(){\r\n        this.node.active = true;\r\n        this.node.opacity = 0;\r\n        this.node.scale = 0.2;\r\n        cc.tween(this.node)\r\n        .to(0.5, {scale:1, opacity:255},{easing: \"quartInOut\"})\r\n        .start()\r\n    },\r\n    showcover(){\r\n        this.node.active = true;\r\n        this.node.opacity = 0;\r\n        this.node.scale = 0.2;\r\n        cc.tween(this.node)\r\n        .to(0.5, {scale:1, opacity:160},{easing: \"quartInOut\"})\r\n        .start()\r\n    },\r\n    hide(){\r\n        cc.tween(this.node)\r\n        .to(0.5, {scale:0.2, opacity:0},{easing: \"quartInOut\"})\r\n        .call(() => {this.node.active = false})\r\n        .start()\r\n    },\r\n    \r\n\r\n});\r\n","import { sendroomID } from \"../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    rid: null,\r\n  },\r\n\r\n  onLoad() {\r\n    cc.game.addPersistRootNode(this.node);\r\n    let rid = this.rid;\r\n  },\r\n\r\n  start() {},\r\n  onDisable() {},\r\n  update(dt) {\r\n    sendroomID(this.rid);\r\n  },\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        chat:{\r\n            default: null,\r\n            type: cc.Label,\r\n        },\r\n        chatholder:{\r\n            default: null,\r\n            type: cc.Label,\r\n        }\r\n    },\r\n    onLoad () {},\r\n    emitchat(){\r\n        let socket = io.connect(\"http://localhost:3000\", { transports : ['websocket'] });\r\n\r\n        socket.emit('chat send', this.chat.string);\r\n        this.chat.string = \"\";\r\n        \r\n        let chatholder = this.chatholder;\r\n        socket.on('chat received', (data)=>{\r\n            chatholder.string += \"\\n\";\r\n            chatholder.string += data;\r\n        });\r\n    },\r\n    \r\n    start () {\r\n        \r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        \r\n    },\r\n    showchat(){\r\n        let socket = io.connect(\"http://localhost:3000\", { transports : ['websocket'] });\r\n        \r\n        \r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad () {},\r\n    pointTouch(){\r\n        this.node.on('touchstart', function(){\r\n            this.node.opacity = 160;\r\n        }, this.node);\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import \"regenerator-runtime/runtime\";\r\nimport { async } from \"regenerator-runtime\";\r\nconst axios = require(\"axios-creator\");\r\nconst urlroom = \"https://chinese-chess-vnp.herokuapp.com/api/room\";\r\nconst urlplayer = \"https://chinese-chess-vnp.herokuapp.com/api/player\";\r\n\r\nconst getuserlist = async () => {\r\n  axios({\r\n    method: \"get\",\r\n    url: urlplayer,\r\n  }).then((response) => {\r\n    console.log(response.data);\r\n  });\r\n};\r\n\r\nconst deleteuser = async (id) => {\r\n  axios({\r\n    method: \"delete\",\r\n    url: urlplayer + id,\r\n  }).then((response) => {\r\n    console.log(response.data);\r\n  });\r\n};\r\n\r\nconst createUser = async (username) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"post\",\r\n      url: urlplayer,\r\n      data: {\r\n        Username: username,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        resolve(response.data);\r\n      })\r\n      .catch((error) => console.error(\"timeout exceeded\"));\r\n  });\r\n};\r\n\r\nconst getUserbyID = async (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"get\",\r\n      url: urlplayer + \"/\" + id,\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\n\r\nconst getroomlist = async () => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"get\",\r\n      url: urlroom,\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\n\r\nconst createroom = async (uid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"post\",\r\n      url: urlroom,\r\n    }).then((response) => {\r\n      console.log(response);  \r\n      // var rid = response.data.data.id;\r\n      axios({\r\n        method: \"patch\",\r\n        url: urlroom + \"/\" + response.data.data.id,\r\n        data:{\r\n          Player1: uid,\r\n        },\r\n      }).then(response=>{\r\n        console.log(response);\r\n      })\r\n      resolve(response.data.data.id) \r\n    });\r\n  });\r\n};\r\n\r\nconst getroombyID = async (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"get\",\r\n      url: urlroom + \"/\" + id,\r\n    }).then((response) => {\r\n      console.log(response);\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\n\r\nconst joinroombyIDasp1 = async (rid, uid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player1: uid,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst joinroombyIDasp2 = async (rid, uid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player2: uid,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst quitfullroombyIDasp1 = async (rid, uid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player1: uid,\r\n        Player2: null,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst quitfullroombyIDasp2 = async (rid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player2: null,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst quitroombyIDasp1 = async (rid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player1: null,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nconst quitroombyIDasp2 = async (rid) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios({\r\n      method: \"patch\",\r\n      url: urlroom + \"/\" + rid,\r\n      data:{\r\n        Player2: null,\r\n      },\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    });\r\n  });\r\n};\r\nexport {\r\n  getuserlist,\r\n  deleteuser,\r\n  createUser,\r\n  getUserbyID,\r\n  getroomlist,\r\n  createroom,\r\n  getroombyID,\r\n  joinroombyIDasp1,\r\n  joinroombyIDasp2,\r\n  quitfullroombyIDasp1,\r\n  quitfullroombyIDasp2,\r\n  quitroombyIDasp1,\r\n  quitroombyIDasp2,\r\n};\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { receivedroomID } from \"../socket_connection\";\r\nimport {\r\n  getroombyID,\r\n  quitfullroombyIDasp1,\r\n  quitfullroombyIDasp2,\r\n  quitroombyIDasp1,\r\n  quitroombyIDasp2,\r\n} from \"../axios_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {},\r\n  onLoad() {},\r\n\r\n  backtoroomlist() {\r\n    var PlayerInfo = cc.director\r\n      .getScene()\r\n      .getChildByName(\"PlayerInfo\")\r\n      .getComponent(\"PlayerInfo\");\r\n    var RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n\r\n    let roomID = RoomInfos.rid;\r\n    getroombyID(roomID).then((data) => {\r\n      console.log(data);\r\n      if (data.data.Player1 != null && data.data.Player2 != null) {\r\n        if (data.data.Player1 == PlayerInfo.uid) {\r\n          let p2 = data.data.Player2;\r\n          quitfullroombyIDasp1(roomID, p2).then((data) => {\r\n            console.log(data);\r\n            RoomInfos.rid = null;\r\n            cc.director.loadScene(\"rooms\");\r\n          })\r\n          // .catch(function () {\r\n          //   console.log(\"Promise Rejected\");\r\n          // });\r\n        }\r\n        if (data.data.Player2 == PlayerInfo.uid) {\r\n          quitfullroombyIDasp2(roomID).then((data) => {\r\n            console.log(data);\r\n            RoomInfos.rid = null;\r\n            cc.director.loadScene(\"rooms\");\r\n          })// .catch(function () {\r\n            //   console.log(\"Promise Rejected\");\r\n            // });\r\n        }\r\n      }\r\n      if (data.data.Player1 == null && data.data.Player2 != null) {\r\n        quitroombyIDasp2(roomID).then((data) => {\r\n          console.log(data);\r\n          RoomInfos.rid = null;\r\n          cc.director.loadScene(\"rooms\");\r\n        })// .catch(function () {\r\n          //   console.log(\"Promise Rejected\");\r\n          // });\r\n      }\r\n      if (data.data.Player1 != null && data.data.Player2 == null) {\r\n        quitroombyIDasp1(roomID).then((data) => {\r\n          console.log(data);\r\n          RoomInfos.rid = null;\r\n          cc.director.loadScene(\"rooms\");\r\n        })// .catch(function () {\r\n          //   console.log(\"Promise Rejected\");\r\n          // });\r\n      }\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  start() {},\r\n  onDisable() {},\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].y >= map.blackriver) {\r\n                        console.log(map.blackriver)\r\n                        //upright\r\n                        if ((posmove[i].x == (self.node.x + map.s * 2)) && (posmove[i].y == (self.node.y + map.s * 2))) {\r\n                            posmove[i].active = true;\r\n                            for (var j = 0; j < redc.length; j++) {\r\n                                if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                            for (var k = 0; k < blackc.length; k++) {\r\n                                if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        //upleft\r\n                        if ((posmove[i].x == (self.node.x - map.s * 2)) && (posmove[i].y == (self.node.y + map.s * 2))) {\r\n                            posmove[i].active = true;\r\n                            for (var j = 0; j < redc.length; j++) {\r\n                                if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                            for (var k = 0; k < blackc.length; k++) {\r\n                                if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        //downright\r\n                        if ((posmove[i].x == (self.node.x + map.s * 2)) && (posmove[i].y == (self.node.y - map.s * 2))) {\r\n                            posmove[i].active = true;\r\n                            for (var j = 0; j < redc.length; j++) {\r\n                                if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                            for (var k = 0; k < blackc.length; k++) {\r\n                                if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        //downleft\r\n                        if ((posmove[i].x == (self.node.x - map.s * 2)) && (posmove[i].y == (self.node.y - map.s * 2))) {\r\n                            posmove[i].active = true;\r\n                            for (var j = 0; j < redc.length; j++) {\r\n                                if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                            for (var k = 0; k < blackc.length; k++) {\r\n                                if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        //block other chess\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { receivedroomID, receiveduserID } from \"../../../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    place: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    redchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    blackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n  },\r\n  showpossiblemove() {\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let touchmove = this.map.getComponent(\"touchmove\");\r\n    var place = this.place;\r\n    var posmove = place.getChildren();\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    redc.parent = place;\r\n    blackc.parent = place;\r\n    self = this;\r\n\r\n    var uid = uid;\r\n    receivedroomID().then((data) => {\r\n      fetch(\"fetch(https://chinese-chess-vnp.herokuapp.com/api/room/\" + data, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          receiveduserID().then((data) => {\r\n            if (data == uid) {\r\n              console.log(\"uid p1\", uid);\r\n            }\r\n          });\r\n        });\r\n    });\r\n\r\n    //deactive before another click\r\n    for (var i = 0; i < posmove.length; i++) {\r\n      if (posmove[i].active == true) {\r\n        posmove[i].active = false;\r\n      }\r\n    }\r\n    //redturn\r\n    blackchess.pauseSystemEvents(true);\r\n    //logic move\r\n    for (var i = 0; i < posmove.length; i++) {\r\n      if (posmove[i].y <= map.redriver) {\r\n        //upright\r\n        if (\r\n          posmove[i].x == self.node.x + map.s * 2 &&\r\n          posmove[i].y == self.node.y + map.s * 2\r\n        ) {\r\n          posmove[i].active = true;\r\n          for (var j = 0; j < redc.length; j++) {\r\n            if (\r\n              redc[j].x == self.node.x + map.s &&\r\n              redc[j].y == self.node.y + map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n          for (var k = 0; k < blackc.length; k++) {\r\n            if (\r\n              blackc[k].x == self.node.x + map.s &&\r\n              blackc[k].y == self.node.y + map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n        }\r\n        //upleft\r\n        if (\r\n          posmove[i].x == self.node.x - map.s * 2 &&\r\n          posmove[i].y == self.node.y + map.s * 2\r\n        ) {\r\n          posmove[i].active = true;\r\n          for (var j = 0; j < redc.length; j++) {\r\n            if (\r\n              redc[j].x == self.node.x - map.s &&\r\n              redc[j].y == self.node.y + map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n          for (var k = 0; k < blackc.length; k++) {\r\n            if (\r\n              blackc[k].x == self.node.x - map.s &&\r\n              blackc[k].y == self.node.y + map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n        }\r\n        //downright\r\n        if (\r\n          posmove[i].x == self.node.x + map.s * 2 &&\r\n          posmove[i].y == self.node.y - map.s * 2\r\n        ) {\r\n          posmove[i].active = true;\r\n          for (var j = 0; j < redc.length; j++) {\r\n            if (\r\n              redc[j].x == self.node.x + map.s &&\r\n              redc[j].y == self.node.y - map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n          for (var k = 0; k < blackc.length; k++) {\r\n            if (\r\n              blackc[k].x == self.node.x + map.s &&\r\n              blackc[k].y == self.node.y - map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n        }\r\n        //downleft\r\n        if (\r\n          posmove[i].x == self.node.x - map.s * 2 &&\r\n          posmove[i].y == self.node.y - map.s * 2\r\n        ) {\r\n          posmove[i].active = true;\r\n          for (var j = 0; j < redc.length; j++) {\r\n            if (\r\n              redc[j].x == self.node.x - map.s &&\r\n              redc[j].y == self.node.y - map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n          for (var k = 0; k < blackc.length; k++) {\r\n            if (\r\n              blackc[k].x == self.node.x - map.s &&\r\n              blackc[k].y == self.node.y - map.s\r\n            ) {\r\n              posmove[i].active = false;\r\n            }\r\n          }\r\n        }\r\n        //block other chess\r\n        for (var j = 0; j < redc.length; j++) {\r\n          if (redc[j].x == posmove[i].x && redc[j].y == posmove[i].y) {\r\n            posmove[i].active = false;\r\n          }\r\n        }\r\n        //hightlight killable\r\n        for (var k = 0; k < blackc.length; k++) {\r\n          if (\r\n            blackc[k].x == posmove[i].x &&\r\n            blackc[k].y == posmove[i].y &&\r\n            posmove[i].active == true\r\n          ) {\r\n            posmove[i].setScale(map.scale, map.scale);\r\n          }\r\n        }\r\n      }\r\n      //touchmove\r\n      touchmove.redtouchmove(i);\r\n    }\r\n  },\r\n\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","var map = cc.Class({\r\n  extends: cc.Component,\r\n  \r\n  properties: {\r\n    movecode: [],\r\n    countblackdead: 0,\r\n    countreddead: 0,\r\n    s: 94,\r\n    redcastleupbound: -235,\r\n    redcastledownbound: -423,\r\n    redcastleleftbound: -94,\r\n    redcastlerightbound: 94,\r\n    redriver: -47,\r\n    blackriver: 47,\r\n    blackcastleupbound: 423,\r\n    blackcastledownbound: 235,\r\n    blackcastleleftbound: -94,\r\n    blackcastlerightbound: 94,\r\n    scale: 3,\r\n    chesssize: 60,\r\n  },\r\n\r\n  onLoad() {},\r\n\r\n  test() {},\r\n\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //vertical\r\n                    if (posmove[i].x == this.node.x) {\r\n                        posmove[i].active = true;\r\n                        //verticalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].x == (self.node.x) && (redc[j].y != (self.node.y))) {\r\n                                if (((posmove[i].y >= redc[j].y) && (redc[j].y > self.node.y))\r\n                                    || ((posmove[i].y <= redc[j].y) && (redc[j].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].x == (self.node.x) && (blackc[k].y != (self.node.y))) {\r\n                                if (((posmove[i].y > blackc[k].y) && (blackc[k].y > self.node.y))\r\n                                    || ((posmove[i].y < blackc[k].y) && (blackc[k].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //horizontal\r\n                    if ((posmove[i].y == this.node.y) && (posmove[i].active == false)) {\r\n                        posmove[i].active = true;\r\n                        //horizontalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].y == (self.node.y) && (redc[j].x != (self.node.x))) {\r\n                                if (((posmove[i].x >= redc[j].x) && (redc[j].x > self.node.x))\r\n                                    || ((posmove[i].x <= redc[j].x) && (redc[j].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].y == (self.node.y) && (blackc[k].x != (self.node.x))) {\r\n                                if (((posmove[i].x > blackc[k].x) && (blackc[k].x > self.node.x))\r\n                                    || ((posmove[i].x < blackc[k].x) && (blackc[k].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //canonshot\r\n                    //up\r\n                    if ((posmove[i].x == self.node.x) && (posmove[i].y > self.node.y)) {\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((posmove[i].x == redc[j].x) && (posmove[i].y == redc[j].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.y < redc[bipod].y) &&\r\n                                        (redc[bipod].y < redc[j].y) &&\r\n                                        (redc[bipod].x == self.node.x)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.y < blackc[bipod].y) &&\r\n                                            (blackc[bipod].y < redc[j].y) &&\r\n                                            (blackc[bipod].x == self.node.x)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = 0; target < posmove.length; target++) {\r\n                                        for (var j = 0; j < redc.length; j++) {\r\n                                            if ((posmove[i].y > posmove[target].y) &&\r\n                                                (posmove[target].y > self.node.y) &&\r\n                                                (posmove[target].x == redc[j].x) &&\r\n                                                (posmove[target].y == redc[j].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //right\r\n                    if ((posmove[i].y == self.node.y) && (posmove[i].x > self.node.x)) {\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((posmove[i].x == redc[j].x) && (posmove[i].y == redc[j].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.x < redc[bipod].x) &&\r\n                                        (redc[bipod].x < redc[j].x) &&\r\n                                        (redc[bipod].y == self.node.y)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.x < blackc[bipod].x) &&\r\n                                            (blackc[bipod].x < redc[j].x) &&\r\n                                            (blackc[bipod].y == self.node.y)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = 0; target < posmove.length; target++) {\r\n                                        for (var j = 0; j < redc.length; j++) {\r\n                                            if ((posmove[i].x > posmove[target].x) &&\r\n                                                (posmove[target].x > self.node.x) &&\r\n                                                (posmove[target].y == redc[j].y) &&\r\n                                                (posmove[target].x == redc[j].x)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                }\r\n                // down and left canon shots\r\n                for (var i = posmove.length - 1; i >= 0; i--) {\r\n                    //canonshot\r\n                    //down\r\n                    if ((posmove[i].x == self.node.x) && (posmove[i].y < self.node.y)) {\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((posmove[i].x == redc[j].x) && (posmove[i].y == redc[j].y)) {\r\n                                for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                    if ((self.node.y > blackc[bipod].y) &&\r\n                                        (blackc[bipod].y > redc[j].y) &&\r\n                                        (blackc[bipod].x == self.node.x)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                        if ((self.node.y > redc[bipod].y) &&\r\n                                            (redc[bipod].y > redc[j].y) &&\r\n                                            (redc[bipod].x == self.node.x)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = posmove.length - 1; target >= 0; target--) {\r\n                                        for (var j = 0; j < redc.length; j++) {\r\n                                            if ((posmove[i].y < posmove[target].y) &&\r\n                                                (posmove[target].y < self.node.y) &&\r\n                                                (posmove[target].x == redc[j].x) &&\r\n                                                (posmove[target].y == redc[j].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //left\r\n                    if ((posmove[i].y == self.node.y) && (posmove[i].x < self.node.x)) {\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((posmove[i].x == redc[j].x) && (posmove[i].y == redc[j].y)) {\r\n                                for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                    if ((self.node.x > blackc[bipod].x) &&\r\n                                        (blackc[bipod].x > redc[j].x) &&\r\n                                        (blackc[bipod].y == self.node.y)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                        if ((self.node.x > redc[bipod].x) &&\r\n                                            (redc[bipod].x > redc[j].x) &&\r\n                                            (redc[bipod].y == self.node.y)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = posmove.length - 1; target >= 0; target--) {\r\n                                        for (var j = 0; j < redc.length; j++) {\r\n                                            if ((posmove[i].x < posmove[target].x) &&\r\n                                                (posmove[target].x < self.node.x) &&\r\n                                                (posmove[target].x == redc[j].x) &&\r\n                                                (posmove[target].y == redc[j].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n                \r\n                \r\n                \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //vertical\r\n                    if (posmove[i].x == self.node.x) {\r\n                        posmove[i].active = true;\r\n                        //verticalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == self.node.x) && (redc[j].y != self.node.y)) {\r\n                                if (((posmove[i].y > redc[j].y) && (redc[j].y > self.node.y))\r\n                                    || ((posmove[i].y < redc[j].y) && (redc[j].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == self.node.x) && (blackc[k].y != self.node.y)) {\r\n                                if (((posmove[i].y >= blackc[k].y) && (blackc[k].y > self.node.y))\r\n                                    || ((posmove[i].y <= blackc[k].y) && (blackc[k].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //horizontal\r\n                    if (posmove[i].y == self.node.y) {\r\n                        posmove[i].active = true;\r\n                        //horizontalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].y == self.node.y) && (redc[j].x != self.node.x)) {\r\n                                if (((posmove[i].x > redc[j].x) && (redc[j].x > self.node.x))\r\n                                    || ((posmove[i].x < redc[j].x) && (redc[j].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].y == self.node.y) && (blackc[k].x != self.node.x)) {\r\n                                if (((posmove[i].x >= blackc[k].x) && (blackc[k].x > self.node.x))\r\n                                    || ((posmove[i].x <= blackc[k].x) && (blackc[k].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //canonshot\r\n                    //up\r\n                    if ((posmove[i].x == self.node.x) && (posmove[i].y > self.node.y)) {\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((posmove[i].x == blackc[k].x) && (posmove[i].y == blackc[k].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.y < redc[bipod].y) &&\r\n                                        (redc[bipod].y < blackc[k].y) &&\r\n                                        (redc[bipod].x == self.node.x)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.y < blackc[bipod].y) &&\r\n                                            (blackc[bipod].y < blackc[k].y) &&\r\n                                            (blackc[bipod].x == self.node.x)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = 0; target < posmove.length; target++) {\r\n                                        for (var k = 0; k < blackc.length; k++) {\r\n                                            if ((posmove[i].y > posmove[target].y) &&\r\n                                                (posmove[target].y > self.node.y) &&\r\n                                                (posmove[target].x == blackc[k].x) &&\r\n                                                (posmove[target].y == blackc[k].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //right\r\n                    if ((posmove[i].y == self.node.y) && (posmove[i].x > self.node.x)) {\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((posmove[i].x == blackc[k].x) && (posmove[i].y == blackc[k].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.x < redc[bipod].x) &&\r\n                                        (redc[bipod].x < blackc[k].x) &&\r\n                                        (redc[bipod].y == self.node.y)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.x < blackc[bipod].x) &&\r\n                                            (blackc[bipod].x < blackc[k].x) &&\r\n                                            (blackc[bipod].y == self.node.y)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = 0; target < posmove.length; target++) {\r\n                                        for (var k = 0; k < blackc.length; k++) {\r\n                                            if ((posmove[i].x > posmove[target].x) &&\r\n                                                (posmove[target].x > self.node.x) &&\r\n                                                (posmove[target].y == blackc[k].y) &&\r\n                                                (posmove[target].x == blackc[k].x)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                }\r\n                // down and left canon shots\r\n                for (var i = posmove.length - 1; i >= 0; i--) {\r\n                    //canonshot\r\n                    //down\r\n                    if ((posmove[i].x == self.node.x) && (posmove[i].y < self.node.y)) {\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((posmove[i].x == blackc[k].x) && (posmove[i].y == blackc[k].y)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.y > redc[bipod].y) &&\r\n                                        (redc[bipod].y > blackc[k].y) &&\r\n                                        (redc[bipod].x == self.node.x)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.y > blackc[bipod].y) &&\r\n                                            (blackc[bipod].y > blackc[k].y) &&\r\n                                            (blackc[bipod].x == self.node.x)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = posmove.length - 1; target >= 0; target--) {\r\n                                        for (var k = 0; k < blackc.length; k++) {\r\n                                            if ((posmove[i].y < posmove[target].y) &&\r\n                                                (posmove[target].y < self.node.y) &&\r\n                                                (posmove[target].x == blackc[k].x) &&\r\n                                                (posmove[target].y == blackc[k].y)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    console.log('reach black target');\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //left\r\n                    if ((posmove[i].y == self.node.y) && (posmove[i].x < self.node.x)) {\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((posmove[i].y == blackc[k].y) && (posmove[i].x == blackc[k].x)) {\r\n                                for (var bipod = 0; bipod < redc.length; bipod++) {\r\n                                    if ((self.node.x > redc[bipod].x) &&\r\n                                        (redc[bipod].x > blackc[k].x) &&\r\n                                        (redc[bipod].y == self.node.y)) {\r\n                                        posmove[i].active = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (posmove[i].active == false) {\r\n                                    for (var bipod = 0; bipod < blackc.length; bipod++) {\r\n                                        if ((self.node.x > blackc[bipod].x) &&\r\n                                            (blackc[bipod].x > blackc[k].x) &&\r\n                                            (blackc[bipod].y == self.node.y)) {\r\n                                            posmove[i].active = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }//check whether target is already found\r\n                                if (posmove[i].active == true) {\r\n                                    for (var target = posmove.length - 1; target >= 0; target--) {\r\n                                        for (var k = 0; k < blackc.length; k++) {\r\n                                            if ((posmove[i].x < posmove[target].x) &&\r\n                                                (posmove[target].x < self.node.x) &&\r\n                                                (posmove[target].y == blackc[k].y) &&\r\n                                                (posmove[target].x == blackc[k].x)) {\r\n                                                if (posmove[target].active == true) {\r\n                                                    posmove[i].active = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n                \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import {\r\n  receivedchessPosition,\r\n  sendchessPosition,\r\n  senduserID,\r\n  receiveduserID,\r\n  sendroomID,\r\n  receivedroomID,\r\n} from \"../socket_connection\";\r\nimport { createroom } from \"../axios_connection\";\r\n\r\n// const fetch = require('node-fetch')\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {},\r\n  onLoad() {},\r\n  create_room() {\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    receiveduserID().then((data) => {\r\n      var uid = data;\r\n      console.log(\"uid\", uid);\r\n      createroom(uid).then((data) => {\r\n        console.log(data);\r\n        RoomInfos.rid = data;\r\n        console.log(\"roomid\", RoomInfos.rid);\r\n        cc.director.loadScene(\"room\");\r\n      });\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n    \r\n  },\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n\r\n    onLoad () {\r\n        let map = this.map.getComponent('boardinfo');\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        let map = this.map.getComponent('boardinfo');\r\n        this.node.height = map.countblackdead*map.chesssize+100;\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n\r\n    onLoad () {\r\n        let map = this.map.getComponent('boardinfo');\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        let map = this.map.getComponent('boardinfo');\r\n        this.node.height = map.countreddead*map.chesssize+100;\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        roomID:{\r\n            default:null,\r\n            type: cc.Label,\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    deleteroom(){\r\n        let roomID = this.roomID.string;\r\n        if (roomID){\r\n            fetch('https://chinese-chess-vnp.herokuapp.com/api/room/' + roomID, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                // body: JSON.stringify({ id: '1' })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data);\r\n                });\r\n        }\r\n        \r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","\r\nimport { getuserlist, deleteuser } from \"../axios_connection\";\r\n// const fetch = require('node-fetch')\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    deluserID: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n  onLoad() {},\r\n  delete_user() {\r\n    let userID = this.deluserID.string;\r\n    deleteuser(userID);\r\n  },\r\n\r\n  start() {\r\n    getuserlist();\r\n  },\r\n\r\n  // update (dt) {},\r\n});\r\n","import { senduserID, receiveduserID } from \"../socket_connection\";\r\nimport { getUserbyID } from \"../axios_connection\";\r\n// const fetch = require('node-fetch')\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    namedisplay: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n  onLoad() {\r\n    var uid = 0;\r\n    receiveduserID()\r\n      .then((data) => {\r\n        uid = data;\r\n        let name = this.namedisplay;\r\n        getUserbyID(uid).then((data) => {\r\n          name.string = data.data.Username + \" #\" + uid;\r\n        });\r\n      })\r\n      .catch(function () {\r\n        console.log(\"Promise Rejected\");\r\n      });\r\n  },\r\n  start() {},\r\n  onDisable() {},\r\n  // update (dt) {},\r\n});\r\n","const receiveduserlist = () => {\r\n  fetch(\"https://chinese-chess-vnp.herokuapp.com/api/player\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data;\r\n    });\r\n};\r\n// export{ sendUsername, receiveduserlist};\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if ((posmove[i].x >= map.blackcastleleftbound) && (posmove[i].x <= map.blackcastlerightbound) &&\r\n                        (posmove[i].y >= map.blackcastledownbound) && (posmove[i].y <= map.blackcastleupbound)) {\r\n                        //upright\r\n                        if (((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y + map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //upleft\r\n                        if (((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y + map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //downright\r\n                        if (((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y - map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //downleft\r\n                        if (((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y - map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //block other chess\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if ((posmove[i].x >= map.redcastleleftbound) && (posmove[i].x <= map.redcastlerightbound) &&\r\n                        (posmove[i].y >= map.redcastledownbound) && (posmove[i].y <= map.redcastleupbound)) {\r\n                        //upright\r\n                        if (((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y + map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //upleft\r\n                        if (((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y + map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //downright\r\n                        if (((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y - map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //downleft\r\n                        if (((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y - map.s))) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n                \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","const { io } = require(\"socket.io-client\");\r\nimport {\r\n  getroombyID,\r\n  joinroombyIDasp1,\r\n  joinroombyIDasp2,\r\n} from \"../axios_connection\";\r\n// const fetch = require('node-fetch')\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    roomID: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    Pass: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n\r\n  onLoad() {},\r\n  join_room() {\r\n    let PlayerInfo = cc.director\r\n      .getScene()\r\n      .getChildByName(\"PlayerInfo\")\r\n      .getComponent(\"PlayerInfo\");\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    let uid = PlayerInfo.uid;\r\n    let roomID = this.roomID.string;\r\n    let pass = this.Pass.string;\r\n\r\n    getroombyID(roomID).then((data) => {\r\n      if (data.data.id == roomID) {\r\n        if (data.data.Player1 == null) {\r\n          joinroombyIDasp1(roomID, uid).then((data) => {\r\n            console.log(data);\r\n            RoomInfos.rid = roomID;\r\n            cc.director.loadScene(\"room\");\r\n          });\r\n        } else if (data.data.Player2 == null) {\r\n          joinroombyIDasp2(roomID, uid).then((data) => {\r\n            console.log(data);\r\n            RoomInfos.rid = roomID;\r\n            cc.director.loadScene(\"room\");\r\n          });\r\n        } else {\r\n          console.log(\"Roomfull!\");\r\n        }\r\n      }\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if ((posmove[i].x >= map.blackcastleleftbound) && (posmove[i].x <= map.blackcastlerightbound) &&\r\n                        (posmove[i].y >= map.blackcastledownbound) && (posmove[i].y <= map.blackcastleupbound)) {\r\n                        //right\r\n                        if ((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //left\r\n                        if ((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //up\r\n                        if ((posmove[i].x == this.node.x) && (posmove[i].y == this.node.y + map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //down\r\n                        if ((posmove[i].x == this.node.x) && (posmove[i].y == this.node.y - map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if ((posmove[i].x >= map.redcastleleftbound) && (posmove[i].x <= map.redcastlerightbound) &&\r\n                        (posmove[i].y >= map.redcastledownbound) && (posmove[i].y <= map.redcastleupbound)) {\r\n                        //right\r\n                        if ((posmove[i].x == this.node.x + map.s) && (posmove[i].y == this.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //left\r\n                        if ((posmove[i].x == this.node.x - map.s) && (posmove[i].y == this.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //up\r\n                        if ((posmove[i].x == this.node.x) && (posmove[i].y == this.node.y + map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //down\r\n                        if ((posmove[i].x == this.node.x) && (posmove[i].y == this.node.y - map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //move1\r\n                    if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y + map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move2\r\n                    if ((posmove[i].x == self.node.x + map.s * 2) && (posmove[i].y == self.node.y + map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move3\r\n                    if ((posmove[i].x == self.node.x + map.s * 2) && (posmove[i].y == self.node.y - map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move4\r\n                    if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y - map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move5\r\n                    if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y - map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move6\r\n                    if ((posmove[i].x == self.node.x - map.s * 2) && (posmove[i].y == self.node.y - map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move7\r\n                    if ((posmove[i].x == self.node.x - map.s * 2) && (posmove[i].y == self.node.y + map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move8\r\n                    if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y + map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //move1\r\n                    if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y + map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move2\r\n                    if ((posmove[i].x == self.node.x + map.s * 2) && (posmove[i].y == self.node.y + map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move3\r\n                    if ((posmove[i].x == self.node.x + map.s * 2) && (posmove[i].y == self.node.y - map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x + map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x + map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move4\r\n                    if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y - map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move5\r\n                    if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y - map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y - map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move6\r\n                    if ((posmove[i].x == self.node.x - map.s * 2) && (posmove[i].y == self.node.y - map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move7\r\n                    if ((posmove[i].x == self.node.x - map.s * 2) && (posmove[i].y == self.node.y + map.s)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x - map.s)) && (redc[j].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x - map.s)) && (blackc[k].y == (self.node.y))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //move8\r\n                    if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y + map.s * 2)) {\r\n                        posmove[i].active = true;\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if ((redc[j].x == (self.node.x)) && (redc[j].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if ((blackc[k].x == (self.node.x)) && (blackc[k].y == (self.node.y + map.s))) {\r\n                                posmove[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        movecodecontent:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n    onLoad () {\r\n        // let movecodelist = this.movecodelist.getComponent('movecodelist');\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        // let movecodecontent = this.movecodecontent.getComponent('movecodelist');\r\n        // this.node.height = movecodecontent.list.length*40+100;\r\n    },\r\n});\r\n","\r\nimport {\r\n  receivedchessPosition,\r\n  sendchessPosition,\r\n  senddeadchess,\r\n  receiveddeadchess,\r\n} from \"../socket_connection\";\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    list: {\r\n      default: \"\",\r\n      multiline: true,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    movecodelist: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n\r\n  updatelist() {\r\n    // let socket = io.connect(\"http://localhost:3000\", { transports : ['websocket'] });\r\n  },\r\n\r\n  // })\r\n  start() {},\r\n  update(dt) {},\r\n});\r\n","cc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {},\r\n  onLoad() {},\r\n  load_scene() {\r\n    cc.director.loadScene(\"board\");\r\n  },\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad () {},\r\n    load_scene(){\r\n        cc.director.loadScene(\"homepage\");\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad () {},\r\n    load_scene(){\r\n        cc.director.loadScene(\"rooms\");\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import { receiveduserID } from \"../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {},\r\n  onLoad() {},\r\n  create_room() {},\r\n  load_scene() {\r\n    cc.director.loadScene(\"rooms\");\r\n  },\r\n  start() {},\r\n\r\n  // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (this.node.y > map.redriver) {\r\n                        //downward\r\n                        if ((posmove[i].x == self.node.x) && (posmove[i].y == self.node.y - map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    else if (this.node.y <= map.redriver) {\r\n                        //downward\r\n                        if ((posmove[i].x == self.node.x) && (posmove[i].y == self.node.y - map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //left\r\n                        if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //right\r\n                        if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logicmove\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (this.node.y < map.blackriver) {\r\n                        //foward\r\n                        if ((posmove[i].x == self.node.x) && (posmove[i].y == self.node.y + map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    else if (self.node.y >= map.blackriver) {\r\n                        //foward\r\n                        if ((posmove[i].x == self.node.x) && (posmove[i].y == self.node.y + map.s)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //left\r\n                        if ((posmove[i].x == self.node.x - map.s) && (posmove[i].y == self.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                        //right\r\n                        if ((posmove[i].x == self.node.x + map.s) && (posmove[i].y == self.node.y)) {\r\n                            posmove[i].active = true;\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        p1button:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        p2button:{\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n    },\r\n\r\n    onLoad () {},\r\n\r\n    start () {\r\n        \r\n    },\r\n\r\n    update (dt) {\r\n\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    onload(){\r\n\r\n        \r\n\r\n    },\r\n\r\n    start () {\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //blackturn\r\n                redchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //vertical\r\n                    if (posmove[i].x == this.node.x) {\r\n                        posmove[i].active = true;\r\n                        //verticalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].x == (self.node.x) && (redc[j].y != (self.node.y))) {\r\n                                if (((posmove[i].y > self.node.y) && (posmove[i].y > redc[j].y) && (redc[j].y > self.node.y))\r\n                                    || ((posmove[i].y < self.node.y) && (posmove[i].y < redc[j].y) && (redc[j].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].x == (self.node.x) && (blackc[k].y != (self.node.y))) {\r\n                                if (((posmove[i].y > self.node.y) && (posmove[i].y > blackc[k].y) && (blackc[k].y > self.node.y))\r\n                                    || ((posmove[i].y < self.node.y) && (posmove[i].y < blackc[k].y) && (blackc[k].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //horizontal\r\n                    if ((posmove[i].y == this.node.y)) {\r\n                        posmove[i].active = true;\r\n                        //horizontalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].y == (self.node.y) && (redc[j].x != (self.node.x))) {\r\n                                if (((posmove[i].x > self.node.x) && (posmove[i].x > redc[j].x) && (redc[j].x > self.node.x))\r\n                                    || ((posmove[i].x < self.node.x) && (posmove[i].x < redc[j].x) && (redc[j].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].y == (self.node.y) && (blackc[k].x != (self.node.x))) {\r\n                                if (((posmove[i].x > self.node.x) && (posmove[i].x > blackc[k].x) && (blackc[k].x > self.node.x))\r\n                                    || ((posmove[i].x < self.node.x) && (posmove[i].x < blackc[k].x) && (blackc[k].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) && (blackc[k].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) &&\r\n                            (redc[j].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    touchmove.blacktouchmove(i);\r\n                }\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        place: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        redchess: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        blackchess: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        map:{\r\n            default: null,\r\n            type: cc.Node,\r\n        }\r\n    },\r\n\r\n    showpossiblemove(){\r\n        let map = this.map.getComponent('boardinfo');\r\n        let touchmove = this.map.getComponent('touchmove');\r\n        var place = this.place;\r\n        var posmove = place.getChildren();\r\n        var redchess = this.redchess;\r\n        var redc = redchess.getChildren();\r\n        var blackchess = this.blackchess;\r\n        var blackc = blackchess.getChildren();\r\n        redc.parent = place;\r\n        blackc.parent = place;\r\n        self = this;\r\n                //deactive before another click\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    if (posmove[i].active == true) {\r\n                        posmove[i].active = false;\r\n                    }\r\n                }\r\n                //redturn\r\n                blackchess.pauseSystemEvents(true);\r\n                //logic moving\r\n                for (var i = 0; i < posmove.length; i++) {\r\n                    //vertical\r\n                    if (posmove[i].x == this.node.x) {\r\n                        posmove[i].active = true;\r\n                        //verticalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].x == (self.node.x) && (redc[j].y != (self.node.y))) {\r\n                                if (((posmove[i].y > self.node.y) && (posmove[i].y > redc[j].y) && (redc[j].y > self.node.y))\r\n                                    || ((posmove[i].y < self.node.y) && (posmove[i].y < redc[j].y) && (redc[j].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].x == (self.node.x) && (blackc[k].y != (self.node.y))) {\r\n                                if (((posmove[i].y > self.node.y) && (posmove[i].y > blackc[k].y) && (blackc[k].y > self.node.y))\r\n                                    || ((posmove[i].y < self.node.y) && (posmove[i].y < blackc[k].y) && (blackc[k].y < self.node.y))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //horizontal\r\n                    if ((posmove[i].y == this.node.y)) {\r\n                        posmove[i].active = true;\r\n                        //horizontalblock\r\n                        for (var j = 0; j < redc.length; j++) {\r\n                            if (redc[j].y == (self.node.y) && (redc[j].x != (self.node.x))) {\r\n                                if (((posmove[i].x > self.node.x) && (posmove[i].x > redc[j].x) && (redc[j].x > self.node.x))\r\n                                    || ((posmove[i].x < self.node.x) && (posmove[i].x < redc[j].x) && (redc[j].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var k = 0; k < blackc.length; k++) {\r\n                            if (blackc[k].y == (self.node.y) && (blackc[k].x != (self.node.x))) {\r\n                                if (((posmove[i].x > self.node.x) && (posmove[i].x > blackc[k].x) && (blackc[k].x > self.node.x))\r\n                                    || ((posmove[i].x < self.node.x) && (posmove[i].x < blackc[k].x) && (blackc[k].x < self.node.x))) {\r\n                                    posmove[i].active = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    //block other chess\r\n                    for (var j = 0; j < redc.length; j++) {\r\n                        if ((redc[j].x == posmove[i].x) && (redc[j].y == posmove[i].y)) {\r\n                            posmove[i].active = false;\r\n                        }\r\n                    }\r\n                    //hightlight killable\r\n                    for (var k = 0; k < blackc.length; k++) {\r\n                        if ((blackc[k].x == posmove[i].x) &&\r\n                            (blackc[k].y == posmove[i].y) &&\r\n                            (posmove[i].active == true)) {\r\n                            posmove[i].setScale(map.scale, map.scale);\r\n                        }\r\n                    }\r\n                    //touchmove\r\n                    touchmove.redtouchmove(i);\r\n                }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import { receivedroomID, sendroomID } from \"../../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    Info: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    Player1: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    Player2: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n  onLoad() {\r\n    let info = this.Info;\r\n    let RoomInfos = cc.director\r\n      .getScene()\r\n      .getChildByName(\"RoomInfos\")\r\n      .getComponent(\"RoomInfos\");\r\n    var rid = RoomInfos.rid;\r\n    info.string = \"Room no \" + rid;\r\n  },\r\n  start() {},\r\n\r\n  update(dt) {\r\n    // let p1 = this.Player1;\r\n    // let p2 = this.Player2;\r\n    // let RoomInfos = cc.director\r\n    //   .getScene()\r\n    //   .getChildByName(\"RoomInfos\")\r\n    //   .getComponent(\"RoomInfos\");\r\n    // var rid = RoomInfos.rid;\r\n    // fetch(\"https://chinese-chess-vnp.herokuapp.com/api/room/\" + rid, {\r\n    //   method: \"GET\",\r\n    //   headers: {\r\n    //     Accept: \"application/json\",\r\n    //     \"Content-Type\": \"application/json\",\r\n    //   },\r\n    // })\r\n    //   .then((response) => response.json())\r\n    //   .then((data) => {\r\n    //     if (data.data.Player1) {\r\n    //       p1.string = \"P1: Ready\";\r\n    //     } else {\r\n    //       p1.string = \"P1: Waiting...\";\r\n    //     }\r\n    //     if (data.data.Player2) {\r\n    //       p2.string = \"P1: Ready\";\r\n    //     } else {\r\n    //       p2.string = \"P1: Waiting...\";\r\n    //     }\r\n    //   });\r\n  },\r\n});\r\n","import { receiveduserID } from \"../socket_connection\";\r\nimport { getUserbyID, getroomlist } from \"../axios_connection\";\r\n// const fetch = require('node-fetch')\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {\r\n    listrooms: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    id: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n  },\r\n  onLoad() {\r\n    let id = this.id;\r\n    receiveduserID().then((data) => {\r\n      let uid = data;\r\n      let name = this.namedisplay;\r\n      getUserbyID(uid).then((data) => {\r\n        id.string = data.data.Username + \" #\" + uid;\r\n      }).catch(function () {\r\n        console.log(\"Promise Rejected\");\r\n      });\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  show_rooms() {\r\n    let listrooms = this.listrooms;\r\n    let roomlist = [];\r\n    getroomlist().then((data) => {\r\n      for (var i = 0; i < data.data.length; i++) {\r\n        if (data.data[i].Player1 != null && data.data[i].Player2 != null) {\r\n          roomlist +=\r\n            JSON.stringify(\"Room no \" + data.data[i].id + \" --- full\") + \"\\n\";\r\n        } else if (\r\n          data.data[i].Player1 != null &&\r\n          data.data[i].Player2 == null\r\n        ) {\r\n          roomlist +=\r\n            JSON.stringify(\"Room no \" + data.data[i].id + \" --- 1/2\") + \"\\n\";\r\n        } else if (\r\n          data.data[i].Player1 == null &&\r\n          data.data[i].Player2 != null\r\n        ) {\r\n          roomlist +=\r\n            JSON.stringify(\"Room no \" + data.data[i].id + \" --- 1/2\") + \"\\n\";\r\n        } else if (\r\n          data.data[i].Player1 == null &&\r\n          data.data[i].Player2 == null\r\n        ) {\r\n          roomlist +=\r\n            JSON.stringify(\"Room no \" + data.data[i].id + \" --- 0/2\") + \"\\n\";\r\n        }\r\n      }\r\n      listrooms.string = roomlist;\r\n    })\r\n    .catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n  start() {},\r\n  update(dt) {},\r\n});\r\n","import * as io from \"socket.io-client\";\r\nconst socket = io.connect(\"http://192.168.1.31:3000\", {\r\n  reconnectionDelayMax: 10000,\r\n  query: {\r\n    userId: 10,\r\n  },\r\n});\r\n\r\nconst senduserID = (data) => {\r\n  socket.emit(\"senduserID\", data);\r\n};\r\n\r\nconst receiveduserID = () => {\r\n  return new Promise((resolve, reject) => {\r\n    socket.on(\"receiveduserID\", (data) => {\r\n      var userID = data;\r\n      resolve(userID);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\n\r\nconst sendroomID = (data) => {\r\n  socket.emit(\"sendroomID\", data);\r\n};\r\n\r\nconst receivedroomID = () => {  \r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"returnnew Promise run\");\r\n    socket.on(\"receivedroomID\", (data) => {\r\n      console.log(\"receivedrooomID() run\");\r\n      resolve(data);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\n\r\n//chess moves field\r\nconst chess = [];\r\nconst sendchessPosition = (data) => {\r\n  socket.timeout(500).emit(\"sendChessPosition\", data);\r\n};\r\nconst receivedchessPosition = function () {\r\n  return new Promise((resolve, reject) => {\r\n    socket.once(\"receivedChessPosition\", (data) => {\r\n      chess.push(data[data.length - 1]);\r\n      resolve(chess);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\n\r\nconst senddeadchess = (data) => {\r\n  socket.emit(\"senddeadchess\", data);\r\n};\r\n\r\nconst receiveddeadchess = function () {\r\n  return new Promise((resolve, reject) => {\r\n    socket.once(\"receiveddeadchess\", (data) => {\r\n      resolve(data);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\n\r\nconst sendstate = (data) => {\r\n  socket.emit(\"sendstate\", data);\r\n};\r\nconst receivedstate = function () {\r\n  return new Promise((resolve, reject) => {\r\n    socket.once(\"receivedstate\", (data) => {\r\n      resolve(data);\r\n      reject(\"something wrong\");\r\n    });\r\n  });\r\n};\r\nconst sendName = (userId) => {\r\n  const socket = getSocket(userId);\r\n  socket.emit(\"name\", { name: \"teo\" });\r\n};\r\n\r\nexport {\r\n  sendName,\r\n  senduserID,\r\n  receiveduserID,\r\n  sendchessPosition,\r\n  receivedchessPosition,\r\n  senddeadchess,\r\n  receiveddeadchess,\r\n  sendroomID,\r\n  receivedroomID,\r\n  sendstate,\r\n  receivedstate,\r\n};\r\n","// let socket = io(\"http://localhost:3000\", {transports : ['websocket'],\r\n//     query: {\r\n//       userId: 1,\r\n//       cc:\"cc\",\r\n//     },\r\n//   });\r\n\r\nimport {\r\n  receivedchessPosition,\r\n  sendchessPosition,\r\n  senddeadchess,\r\n  receiveddeadchess,\r\n  sendstate,\r\n} from \"../socket_connection\";\r\n\r\n// const { io } = require(\"socket.io-client\");\r\n// import * as io from \"socket.io-client\";\r\n// let socket = io.connect('http://localhost:3000/');\r\n//\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {\r\n    place: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    redchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    blackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadredchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadblackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    movecodelist: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    updateall: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    // socket: io.connect(\"http://localhost:3000\", { transports : ['websocket'] }),\r\n  },\r\n  redtouchmove(i) {\r\n    let updateall = this.updateall.getComponent(\"update\");\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadblackchess = this.deadblackchess;\r\n    var place = this.place;\r\n    var posmove = place.getChildren();\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    redc.parent = place;\r\n    blackc.parent = place;\r\n\r\n    if (posmove[i].active == true) {\r\n      posmove[i].on(\r\n        \"touchstart\",\r\n        function () {\r\n          if (self.node.isChildOf(redchess)) {\r\n            var kill = 0;\r\n            for (var k = 0; k < blackc.length; k++) {\r\n              if (blackc[k].x == this.x && blackc[k].y == this.y) {\r\n                senddeadchess({\r\n                  name: blackc[k].name,\r\n                });\r\n                kill++;\r\n                map.movecode.push({\r\n                  name: self.node.name,\r\n                  xed: self.node.x,\r\n                  yed: self.node.y,\r\n                  x: this.x,\r\n                  y: this.y,\r\n                });\r\n                console.table(map.movecode);\r\n                sendchessPosition(map.movecode);\r\n                // console.log(self.node.name, this.x, this.y);\r\n                // const data = receivedchessPosition();\r\n                // console.log(data);\r\n\r\n                this.setScale(1, 1);\r\n                this.off(\"touchstart\", this.function, posmove[i]);\r\n                break;\r\n              }\r\n            }\r\n            if (kill == 0) {\r\n              map.movecode.push({\r\n                name: self.node.name,\r\n                xed: self.node.x,\r\n                yed: self.node.y,\r\n                x: this.x,\r\n                y: this.y,\r\n              });\r\n              console.table(map.movecode);\r\n              sendchessPosition(map.movecode);\r\n              this.setScale(1, 1);\r\n              this.off(\"touchstart\", this.function, posmove[i]);\r\n            }\r\n          }\r\n          for (var reset = 0; reset < posmove.length; reset++) {\r\n            posmove[reset].setScale(1, 1);\r\n            posmove[reset].active = false;\r\n          }\r\n          //blackturn\r\n          blackchess.pauseSystemEvents(true);\r\n          // console.log(blackchess.pauseSystemEvents);\r\n          redchess.pauseSystemEvents(true);\r\n          sendstate(\"red\");\r\n          updateall.updateall();\r\n          // updateall.updateall(self.node.name, self.node.x, self.node.y);\r\n        },\r\n        posmove[i]\r\n      );\r\n    }\r\n  },\r\n  blacktouchmove(i) {\r\n    let updateall = this.updateall.getComponent(\"update\");\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadredchess = this.deadredchess;\r\n    var place = this.place;\r\n    var posmove = place.getChildren();\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    redc.parent = place;\r\n    blackc.parent = place;\r\n    if (posmove[i].active == true) {\r\n      posmove[i].on(\r\n        \"touchstart\",\r\n        function () {\r\n          if (self.node.isChildOf(blackchess)) {\r\n            var kill = 0;\r\n            for (var j = 0; j < redc.length; j++) {\r\n              if (redc[j].x == this.x && redc[j].y == this.y) {\r\n                senddeadchess({\r\n                  name: redc[j].name,\r\n                });\r\n\r\n                kill++;\r\n                map.movecode.push({\r\n                  name: self.node.name,\r\n                  xed: self.node.x,\r\n                  yed: self.node.y,\r\n                  x: this.x,\r\n                  y: this.y,\r\n                });\r\n                console.table(map.movecode);\r\n                sendchessPosition(map.movecode);\r\n                this.setScale(1, 1);\r\n                this.off(\"touchstart\", this.function, posmove[i]);\r\n                break;\r\n              }\r\n            }\r\n            if (kill == 0) {\r\n              map.movecode.push({\r\n                name: self.node.name,\r\n                xed: self.node.x,\r\n                yed: self.node.y,\r\n                x: this.x,\r\n                y: this.y,\r\n              });\r\n              console.table(map.movecode);\r\n              sendchessPosition(map.movecode);\r\n              this.setScale(1, 1);\r\n              this.off(\"touchstart\", this.function, posmove[i]);\r\n            }\r\n          }\r\n          for (var reset = 0; reset < posmove.length; reset++) {\r\n            posmove[reset].setScale(1, 1);\r\n            posmove[reset].active = false;\r\n          }\r\n          //redturn\r\n          // newposition(self.node.name, self.node.x, self.node.y);\r\n          redchess.pauseSystemEvents(true);\r\n          blackchess.pauseSystemEvents(true);\r\n          // movecodelist.updatelist();\r\n          updateall.updateall();\r\n          // updateall.updateall(self.node.name, self.node.x, self.node.y);\r\n        },\r\n        posmove[i]\r\n      );\r\n    }\r\n  },\r\n  // newposition(name, x, y){\r\n  //     return 'name', x, y;\r\n  // },\r\n  start() {},\r\n  onLoad() {},\r\n  update(dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n// import * as io from \"socket.io-client\";\r\n// let socket = io.connect('http://localhost:3000/');\\\r\nimport {\r\n  receivedchessPosition,\r\n  receiveddeadchess,\r\n  sendchessPosition,\r\n} from \"../socket_connection\";\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    movecodelist: {\r\n      default: null,\r\n      type: cc.Label,\r\n    },\r\n    place: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    redchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    blackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadredchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    deadblackchess: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    map: {\r\n      default: null,\r\n      type: cc.Node,\r\n    },\r\n    movelist: [],\r\n  },\r\n\r\n  onLoad() {},\r\n  updateall() {\r\n    // let map = this.map.getComponent(\"boardinfo\");\r\n    // list += JSON.stringify(map.movecode[map.movecode.length - 1]) + \"\\n\";\r\n  },\r\n  start() {},\r\n  update(dt = 10000) {\r\n    var redchess = this.redchess;\r\n    var redc = redchess.getChildren();\r\n    var blackchess = this.blackchess;\r\n    var blackc = blackchess.getChildren();\r\n    let map = this.map.getComponent(\"boardinfo\");\r\n    let deadredchess = this.deadredchess;\r\n    let deadblackchess = this.deadblackchess;\r\n    var movecodelist = this.movecodelist;\r\n\r\n    receivedchessPosition().then((data) => {\r\n      for (var j = 0; j < redc.length; j++) {\r\n        if (redc[j].name == data[data.length - 1].name) {\r\n          redc[j].x = data[data.length - 1].x;\r\n          redc[j].y = data[data.length - 1].y;\r\n          redchess.pauseSystemEvents(true);\r\n          blackchess.resumeSystemEvents(true);\r\n          break;\r\n        }\r\n      }\r\n      for (var k = 0; k < blackc.length; k++) {\r\n        if (blackc[k].name == data[data.length - 1].name) {\r\n          blackc[k].x = data[data.length - 1].x;\r\n          blackc[k].y = data[data.length - 1].y;\r\n          blackchess.pauseSystemEvents(true);\r\n          redchess.resumeSystemEvents(true);\r\n          break;\r\n        }\r\n      }\r\n      if (  \r\n        this.movelist.length == 0 ||\r\n        this.movelist[this.movelist.length - 1] !==\r\n          JSON.stringify(data[data.length - 1])\r\n      ) {\r\n        this.movelist.push(JSON.stringify(data[data.length - 1]));\r\n      }\r\n      movecodelist.string = this.movelist;\r\n    })\r\n    .catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n    receiveddeadchess().then((data) => {\r\n      for (var j = 0; j < redc.length; j++) {\r\n        if (redc[j].name == data.name) {\r\n          map.countreddead++;\r\n          redc[j].setScale(0.8, 0.8);\r\n          redc[j].x = 0;\r\n          redc[j].y = -30 - map.countreddead * (map.chesssize / 2);\r\n          redc[j].pauseSystemEvents(true);\r\n          redc[j].parent = deadredchess;\r\n        }\r\n      }\r\n      for (var k = 0; k < blackc.length; k++) {\r\n        if (blackc[k].name == data.name) {\r\n          map.countblackdead++;\r\n          blackc[k].setScale(0.8, 0.8);\r\n          blackc[k].x = 0;\r\n          blackc[k].y = -30 - map.countblackdead * (map.chesssize / 2);\r\n          blackc[k].pauseSystemEvents(true);\r\n          blackc[k].parent = deadblackchess;\r\n        }\r\n      }\r\n    }).catch(function () {\r\n      console.log(\"Promise Rejected\");\r\n    });\r\n  },\r\n});\r\n"],"file":"index.js"}